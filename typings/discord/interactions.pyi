from .channel import CategoryChannel, DMChannel, ForumChannel, GroupChannel, PartialMessageable, StageChannel, TextChannel, VoiceChannel
from .client import Client
from .commands import OptionChoice
from .embeds import Embed
from .enums import InteractionType
from .file import File
from .guild import Guild
from .member import Member
from .mentions import AllowedMentions
from .message import Attachment, Message
from .permissions import Permissions
from .poll import Poll
from .state import ConnectionState
from .threads import Thread
from .types.interactions import Interaction as InteractionPayload, InteractionMetadata as InteractionMetadataPayload, MessageInteraction as MessageInteractionPayload
from .ui.modal import Modal
from .ui.view import View
from .user import User
from .webhook.async_ import Webhook, WebhookMessage
from _typeshed import Incomplete
from typing import Any

MISSING: Any # STUB: CAP

__all__ = ['Interaction', 'InteractionMessage', 'InteractionResponse', 'MessageInteraction', 'InteractionMetadata', 'AuthorizingIntegrationOwners']

InteractionChannel = VoiceChannel | StageChannel | TextChannel | ForumChannel | CategoryChannel | Thread | DMChannel | GroupChannel | PartialMessageable

class Interaction:
    def __init__(self, *, data: InteractionPayload, state: ConnectionState) -> None: ...
    @property
    def client(self) -> Client: ...
    @property
    def guild(self) -> Guild | None: ...
    def is_command(self) -> bool: ...
    def is_component(self) -> bool: ...
    def cached_channel(self) -> InteractionChannel | None: ...
    @property
    def permissions(self) -> Permissions: ...
    def app_permissions(self) -> Permissions: ...
    @property # STUB: CAP
    def response(self) -> InteractionResponse: ...
    def followup(self) -> Webhook: ...
    async def original_response(self) -> InteractionMessage: ...
    async def original_message(self): ...
    async def edit_original_response(self, *, content: str | None = ..., embeds: list[Embed] = ..., embed: Embed | None = ..., file: File = ..., files: list[File] = ..., attachments: list[Attachment] = ..., view: View | None = ..., allowed_mentions: AllowedMentions | None = None, delete_after: float | None = None, suppress: bool = False) -> InteractionMessage: ...
    async def edit_original_message(self, **kwargs): ...
    async def delete_original_response(self, *, delay: float | None = None) -> None: ...
    async def delete_original_message(self, **kwargs): ...
    
    async def respond(
        self,
        content: Any | None = None,
        *,
        embed: Embed = MISSING,
        embeds: list[Embed] = MISSING,
        view: View = MISSING,
        tts: bool = False,
        ephemeral: bool = False,
        allowed_mentions: AllowedMentions = MISSING,
        file: File = MISSING,
        files: list[File] = MISSING,
        poll: Poll = MISSING,
        delete_after: float = MISSING,
    ) -> Interaction | WebhookMessage: ... # STUB: CAP
    
    async def edit(self,
        *,
        content: Any | None = MISSING,
        embed: Embed | None = MISSING,
        embeds: list[Embed] = MISSING,
        file: File = MISSING,
        files: list[File] = MISSING,
        attachments: list[Attachment] = MISSING,
        view: View | None = MISSING,
        delete_after: float | None = None,
        suppress: bool | None = MISSING,
        allowed_mentions: AllowedMentions | None = None,
    ) -> InteractionMessage | None: ... # STUB: CAP
    
    def to_dict(self) -> dict[str, Any]: ...
    
    user: User | Member | None # STUB: CAP

class InteractionResponse:
    def __init__(self, parent: Interaction) -> None: ...
    def is_done(self) -> bool: ...
    async def defer(self, *, ephemeral: bool = False, invisible: bool = True) -> None: ...
    async def pong(self) -> None: ...
    async def send_message(self, content: Any | None = None, *, embed: Embed = None, embeds: list[Embed] = None, view: View = None, tts: bool = False, ephemeral: bool = False, allowed_mentions: AllowedMentions = None, file: File = None, files: list[File] = None, poll: Poll = None, delete_after: float = None) -> Interaction: ...
    async def edit_message(self, *, content: Any | None = ..., embed: Embed | None = ..., embeds: list[Embed] = ..., file: File = ..., files: list[File] = ..., attachments: list[Attachment] = ..., view: View | None = ..., delete_after: float | None = None, suppress: bool | None = ..., allowed_mentions: AllowedMentions | None = None) -> None: ...
    async def send_autocomplete_result(self, *, choices: list[OptionChoice]) -> None: ...
    async def send_modal(self, modal: Modal) -> Interaction: ...
    async def premium_required(self) -> Interaction: ...

class _InteractionMessageState:
    def __init__(self, interaction: Interaction, parent: ConnectionState) -> None: ...
    def store_user(self, data): ...
    def create_user(self, data): ...
    @property
    def http(self): ...
    def __getattr__(self, attr): ...

class InteractionMessage(Message):
    async def edit(self, content: str | None = ..., embeds: list[Embed] = ..., embed: Embed | None = ..., file: File = ..., files: list[File] = ..., attachments: list[Attachment] = ..., view: View | None = ..., allowed_mentions: AllowedMentions | None = None, delete_after: float | None = None, suppress: bool | None = ...) -> InteractionMessage: ...
    async def delete(self, *, delay: float | None = None) -> None: ...

class MessageInteraction:
    data: Incomplete
    id: int
    type: InteractionType
    name: str
    user: User
    def __init__(self, *, data: MessageInteractionPayload, state: ConnectionState) -> None: ...

class InteractionMetadata:
    id: int
    type: InteractionType
    user: User
    authorizing_integration_owners: AuthorizingIntegrationOwners
    original_response_message_id: int | None
    interacted_message_id: int | None
    triggering_interaction_metadata: InteractionMetadata | None
    def __init__(self, *, data: InteractionMetadataPayload, state: ConnectionState) -> None: ...
    def original_response_message(self) -> Message | None: ...
    def interacted_message(self) -> Message | None: ...

class AuthorizingIntegrationOwners:
    user_id: Incomplete
    guild_id: Incomplete
    def __init__(self, data: dict[str, Any], state: ConnectionState) -> None: ...
    def __eq__(self, other): ...
    def __ne__(self, other): ...
    def user(self) -> User | None: ...
    def guild(self) -> Guild | None: ...
