from .enums import UserFlags
from _typeshed import Incomplete
from typing import Any, Callable, ClassVar, Iterator, TypeVar, overload

__all__ = ['SystemChannelFlags', 'MessageFlags', 'AttachmentFlags', 'PublicUserFlags', 'Intents', 'MemberCacheFlags', 'ApplicationFlags', 'ChannelFlags', 'SKUFlags', 'RoleFlags', 'MemberFlags']

FV = TypeVar('FV', bound='flag_value')
BF = TypeVar('BF', bound='BaseFlags')

class flag_value:
    flag: Incomplete
    __doc__: Incomplete
    def __init__(self, func: Callable[[Any], int]) -> None: ...
    @overload
    def __get__(self, instance: None, owner: type[BF]) -> FV: ...
    @overload
    def __get__(self, instance: BF, owner: type[BF]) -> bool: ...
    def __set__(self, instance: BF, value: bool) -> None: ...

class alias_flag_value(flag_value): ...

class BaseFlags:
    VALID_FLAGS: ClassVar[dict[str, int]]
    DEFAULT_VALUE: ClassVar[int]
    value: int
    def __init__(self, **kwargs: bool) -> None: ...
    def __eq__(self, other: Any) -> bool: ...
    def __hash__(self) -> int: ...
    def __iter__(self) -> Iterator[tuple[str, bool]]: ...
    def __and__(self, other): ...
    def __or__(self, other): ...
    def __add__(self, other): ...
    def __sub__(self, other): ...
    def __invert__(self): ...
    __rand__: Callable[[BaseFlags | flag_value], bool]
    __ror__: Callable[[BaseFlags | flag_value], bool]
    __radd__: Callable[[BaseFlags | flag_value], bool]
    __rsub__: Callable[[BaseFlags | flag_value], bool]

class SystemChannelFlags(BaseFlags):
    @flag_value
    def join_notifications(self): ...
    @flag_value
    def premium_subscriptions(self): ...
    @flag_value
    def guild_reminder_notifications(self): ...
    @flag_value
    def join_notification_replies(self): ...

class MessageFlags(BaseFlags):
    @flag_value
    def crossposted(self): ...
    @flag_value
    def is_crossposted(self): ...
    @flag_value
    def suppress_embeds(self): ...
    @flag_value
    def source_message_deleted(self): ...
    @flag_value
    def urgent(self): ...
    @flag_value
    def has_thread(self): ...
    @flag_value
    def ephemeral(self): ...
    @flag_value
    def loading(self): ...
    @flag_value
    def failed_to_mention_some_roles_in_thread(self): ...
    @flag_value
    def suppress_notifications(self): ...
    @flag_value
    def is_voice_message(self): ...

class PublicUserFlags(BaseFlags):
    @flag_value
    def staff(self): ...
    @flag_value
    def partner(self): ...
    @flag_value
    def hypesquad(self): ...
    @flag_value
    def bug_hunter(self): ...
    @flag_value
    def premium_promo_dismissed(self): ...
    @flag_value
    def hypesquad_bravery(self): ...
    @flag_value
    def hypesquad_brilliance(self): ...
    @flag_value
    def hypesquad_balance(self): ...
    @flag_value
    def early_supporter(self): ...
    @flag_value
    def team_user(self): ...
    @flag_value
    def system(self): ...
    @flag_value
    def bug_hunter_level_2(self): ...
    @flag_value
    def verified_bot(self): ...
    @flag_value
    def verified_bot_developer(self): ...
    @alias_flag_value
    def early_verified_bot_developer(self): ...
    @flag_value
    def discord_certified_moderator(self): ...
    @flag_value
    def bot_http_interactions(self): ...
    @flag_value
    def active_developer(self): ...
    def all(self) -> list[UserFlags]: ...

class Intents(BaseFlags):
    value: Incomplete
    def __init__(self, **kwargs: bool) -> None: ...
    @classmethod
    def all(cls) -> Intents: ...
    @classmethod
    def none(cls) -> Intents: ...
    @classmethod
    def default(cls) -> Intents: ...
    @flag_value
    def guilds(self): ...
    @flag_value
    def members(self): ...
    @alias_flag_value
    def bans(self): ...
    @flag_value
    def moderation(self): ...
    @flag_value
    def emojis(self): ...
    @alias_flag_value
    def emojis_and_stickers(self): ...
    @flag_value
    def integrations(self): ...
    @flag_value
    def webhooks(self): ...
    @flag_value
    def invites(self): ...
    @flag_value
    def voice_states(self): ...
    @flag_value
    def presences(self): ...
    @alias_flag_value
    def messages(self): ...
    @flag_value
    def guild_messages(self): ...
    @flag_value
    def dm_messages(self): ...
    @alias_flag_value
    def reactions(self): ...
    @flag_value
    def guild_reactions(self): ...
    @flag_value
    def dm_reactions(self): ...
    @alias_flag_value
    def typing(self): ...
    @flag_value
    def guild_typing(self): ...
    @flag_value
    def dm_typing(self): ...
    @flag_value
    def message_content(self): ...
    @flag_value
    def scheduled_events(self): ...
    @flag_value
    def auto_moderation_configuration(self): ...
    @flag_value
    def auto_moderation_execution(self): ...
    @flag_value
    def guild_polls(self): ...
    @flag_value
    def dm_polls(self): ...
    @alias_flag_value
    def polls(self): ...

class MemberCacheFlags(BaseFlags):
    value: Incomplete
    def __init__(self, **kwargs: bool) -> None: ...
    @classmethod
    def all(cls) -> MemberCacheFlags: ...
    @classmethod
    def none(cls) -> MemberCacheFlags: ...
    @flag_value
    def voice(self): ...
    @flag_value
    def joined(self): ...
    @flag_value
    def interaction(self): ...
    @classmethod
    def from_intents(cls, intents: Intents) -> MemberCacheFlags: ...

class ApplicationFlags(BaseFlags):
    @flag_value
    def managed_emoji(self): ...
    @flag_value
    def group_dm_create(self): ...
    @flag_value
    def application_auto_moderation_rule_create_badge(self): ...
    @flag_value
    def rpc_has_connected(self): ...
    @flag_value
    def gateway_presence(self): ...
    @flag_value
    def gateway_presence_limited(self): ...
    @flag_value
    def gateway_guild_members(self): ...
    @flag_value
    def gateway_guild_members_limited(self): ...
    @flag_value
    def verification_pending_guild_limit(self): ...
    @flag_value
    def embedded(self): ...
    @flag_value
    def gateway_message_content(self): ...
    @flag_value
    def gateway_message_content_limited(self): ...
    @flag_value
    def app_commands_badge(self): ...
    @flag_value
    def active(self): ...

class ChannelFlags(BaseFlags):
    @flag_value
    def pinned(self): ...
    @flag_value
    def require_tag(self): ...

class AttachmentFlags(BaseFlags):
    @flag_value
    def is_clip(self): ...
    @flag_value
    def is_thumbnail(self): ...
    @flag_value
    def is_remix(self): ...

class SKUFlags(BaseFlags):
    @flag_value
    def available(self): ...
    @flag_value
    def guild_subscription(self): ...
    @flag_value
    def user_subscription(self): ...

class MemberFlags(BaseFlags):
    @flag_value
    def did_rejoin(self): ...
    @flag_value
    def completed_onboarding(self): ...
    @flag_value
    def bypasses_verification(self): ...
    @flag_value
    def started_onboarding(self): ...

class RoleFlags(BaseFlags):
    @flag_value
    def in_prompt(self): ...
