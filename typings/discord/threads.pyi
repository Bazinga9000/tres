from .abc import Messageable, Snowflake, SnowflakeTime
from .channel import CategoryChannel, ForumChannel, ForumTag, TextChannel
from .enums import ChannelType
from .guild import Guild
from .member import Member
from .message import Message, PartialMessage
from .mixins import Hashable
from .permissions import Permissions
from .role import Role
from .state import ConnectionState
from .types.threads import Thread as ThreadPayload, ThreadArchiveDuration, ThreadMember as ThreadMemberPayload
from _typeshed import Incomplete
from typing import Callable, Iterable

__all__ = ['Thread', 'ThreadMember']

class Thread(Messageable, Hashable):
    guild: Incomplete
    def __init__(self, *, guild: Guild, state: ConnectionState, data: ThreadPayload) -> None: ...
    @property
    def type(self) -> ChannelType: ...
    @property
    def parent(self) -> TextChannel | ForumChannel | None: ...
    @property
    def owner(self) -> Member | None: ...
    @property
    def mention(self) -> str: ...
    @property
    def jump_url(self) -> str: ...
    @property
    def members(self) -> list[ThreadMember]: ...
    @property
    def applied_tags(self) -> list[ForumTag]: ...
    @property
    def last_message(self) -> Message | None: ...
    @property
    def category(self) -> CategoryChannel | None: ...
    @property
    def category_id(self) -> int | None: ...
    @property
    def starting_message(self) -> Message | None: ...
    def is_pinned(self) -> bool: ...
    def is_private(self) -> bool: ...
    def is_news(self) -> bool: ...
    def is_nsfw(self) -> bool: ...
    def permissions_for(self, obj: Member | Role, /) -> Permissions: ...
    async def delete_messages(self, messages: Iterable[Snowflake], *, reason: str | None = None) -> None: ...
    async def purge(self, *, limit: int | None = 100, check: Callable[[Message], bool] = ..., before: SnowflakeTime | None = None, after: SnowflakeTime | None = None, around: SnowflakeTime | None = None, oldest_first: bool | None = False, bulk: bool = True, reason: str | None = None) -> list[Message]: ...
    async def edit(self, *, name: str = ..., archived: bool = ..., locked: bool = ..., invitable: bool = ..., slowmode_delay: int = ..., auto_archive_duration: ThreadArchiveDuration = ..., pinned: bool = ..., applied_tags: list[ForumTag] = ..., reason: str | None = None) -> Thread: ...
    async def archive(self, locked: bool = ...) -> Thread: ...
    async def unarchive(self) -> Thread: ...
    async def join(self) -> None: ...
    async def leave(self) -> None: ...
    async def add_user(self, user: Snowflake): ...
    async def remove_user(self, user: Snowflake): ...
    async def fetch_members(self) -> list[ThreadMember]: ...
    async def delete(self) -> None: ...
    def get_partial_message(self, message_id: int, /) -> PartialMessage: ...

class ThreadMember(Hashable):
    parent: Incomplete
    def __init__(self, parent: Thread, data: ThreadMemberPayload) -> None: ...
    @property
    def thread(self) -> Thread: ...
