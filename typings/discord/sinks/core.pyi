from ..types import snowflake
from ..voice_client import VoiceClient
from _typeshed import Incomplete

__all__ = ['Filters', 'Sink', 'AudioData', 'RawData']

class Filters:
    filtered_users: Incomplete
    seconds: Incomplete
    max_size: Incomplete
    finished: bool
    def __init__(self, **kwargs) -> None: ...
    @staticmethod
    def container(func): ...
    def init(self) -> None: ...
    def wait_and_stop(self) -> None: ...

class RawData:
    data: Incomplete
    client: Incomplete
    header: Incomplete
    decrypted_data: Incomplete
    decoded_data: Incomplete
    user_id: Incomplete
    receive_time: Incomplete
    def __init__(self, data, client) -> None: ...

class AudioData:
    file: Incomplete
    finished: bool
    def __init__(self, file) -> None: ...
    def write(self, data) -> None: ...
    def cleanup(self) -> None: ...
    def on_format(self, encoding) -> None: ...

class Sink(Filters):
    filters: Incomplete
    vc: VoiceClient | None
    audio_data: Incomplete
    def __init__(self, *, filters=None) -> None: ...
    def init(self, vc) -> None: ...
    @Filters.container
    def write(self, data, user) -> None: ...
    finished: bool
    def cleanup(self) -> None: ...
    def get_all_audio(self): ...
    def get_user_audio(self, user: snowflake.Snowflake): ...
