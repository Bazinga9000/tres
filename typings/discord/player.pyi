import io
import threading
from .voice_client import VoiceClient
from typing import Any, Callable, Generic, IO, TypeVar

__all__ = ['AudioSource', 'PCMAudio', 'FFmpegAudio', 'FFmpegPCMAudio', 'FFmpegOpusAudio', 'PCMVolumeTransformer']

AT = TypeVar('AT', bound='AudioSource')
FT = TypeVar('FT', bound='FFmpegOpusAudio')

class AudioSource:
    def read(self) -> bytes: ...
    def is_opus(self) -> bool: ...
    def cleanup(self) -> None: ...
    def __del__(self) -> None: ...

class PCMAudio(AudioSource):
    stream: io.BufferedIOBase
    def __init__(self, stream: io.BufferedIOBase) -> None: ...
    def read(self) -> bytes: ...

class FFmpegAudio(AudioSource):
    def __init__(self, source: str | io.BufferedIOBase, *, executable: str = 'ffmpeg', args: Any, **subprocess_kwargs: Any) -> None: ...
    def cleanup(self) -> None: ...

class FFmpegPCMAudio(FFmpegAudio):
    def __init__(self, source: str | io.BufferedIOBase, *, executable: str = 'ffmpeg', pipe: bool = False, stderr: IO[str] | None = None, before_options: str | None = None, options: str | None = None) -> None: ...
    def read(self) -> bytes: ...
    def is_opus(self) -> bool: ...

class FFmpegOpusAudio(FFmpegAudio):
    def __init__(self, source: str | io.BufferedIOBase, *, bitrate: int = 128, codec: str | None = None, executable: str = 'ffmpeg', pipe: bool = False, stderr=None, before_options=None, options=None) -> None: ...
    @classmethod
    async def from_probe(cls, source: str, *, method: str | Callable[[str, str], tuple[str | None, int | None]] | None = None, **kwargs: Any) -> FT: ...
    @classmethod
    async def probe(cls, source: str, *, method: str | Callable[[str, str], tuple[str | None, int | None]] | None = None, executable: str | None = None) -> tuple[str | None, int | None]: ...
    def read(self) -> bytes: ...
    def is_opus(self) -> bool: ...

class PCMVolumeTransformer(AudioSource, Generic[AT]):
    original: AT
    def __init__(self, original: AT, volume: float = 1.0) -> None: ...
    @property
    def volume(self) -> float: ...
    @volume.setter
    def volume(self, value: float) -> None: ...
    def cleanup(self) -> None: ...
    def read(self) -> bytes: ...

class AudioPlayer(threading.Thread):
    DELAY: float
    daemon: bool
    source: AudioSource
    client: VoiceClient
    after: Callable[[Exception | None], Any] | None
    def __init__(self, source: AudioSource, client: VoiceClient, *, after=None) -> None: ...
    def run(self) -> None: ...
    def stop(self) -> None: ...
    def pause(self, *, update_speaking: bool = True) -> None: ...
    loops: int
    def resume(self, *, update_speaking: bool = True) -> None: ...
    def is_playing(self) -> bool: ...
    def is_paused(self) -> bool: ...
