import abc

from discord import SlashCommand
from .client import Client
from .cog import CogMixin
from .commands import ApplicationCommand, ApplicationContext, AutocompleteContext, SlashCommandGroup
from .errors import DiscordException
from .interactions import Interaction
from .shard import AutoShardedClient
from .types import interactions
from .user import User
from _typeshed import Incomplete
from abc import ABC
from typing import Any, Callable, Concatenate, Coroutine, Generator, Literal, TypeVar

__all__ = ['ApplicationCommandMixin', 'Bot', 'AutoShardedBot']

CoroFunc = Callable[..., Coroutine[Any, Any, Any]]
CFT = TypeVar('CFT', bound=CoroFunc)

class ApplicationCommandMixin(ABC, metaclass=abc.ABCMeta):
    def __init__(self, *args, **kwargs) -> None: ...
    @property
    def all_commands(self): ...
    @property
    def pending_application_commands(self): ...
    @property
    def commands(self) -> list[ApplicationCommand | Any]: ...
    @property
    def application_commands(self) -> list[ApplicationCommand]: ...
    def add_application_command(self, command: ApplicationCommand) -> None: ...
    def remove_application_command(self, command: ApplicationCommand) -> ApplicationCommand | None: ...
    @property
    def get_command(self): ...
    def get_application_command(self, name: str, guild_ids: list[int] | None = None, type: type[ApplicationCommand] = ...) -> ApplicationCommand | None: ...
    async def get_desynced_commands(self, guild_id: int | None = None, prefetched: list[interactions.ApplicationCommand] | None = None) -> list[dict[str, Any]]: ...
    async def register_command(self, command: ApplicationCommand, force: bool = True, guild_ids: list[int] | None = None) -> None: ...
    async def register_commands(self, commands: list[ApplicationCommand] | None = None, guild_id: int | None = None, method: Literal['individual', 'bulk', 'auto'] = 'bulk', force: bool = False, delete_existing: bool = True) -> list[interactions.ApplicationCommand]: ...
    async def sync_commands(self, commands: list[ApplicationCommand] | None = None, method: Literal['individual', 'bulk', 'auto'] = 'bulk', force: bool = False, guild_ids: list[int] | None = None, register_guild_commands: bool = True, check_guilds: list[int] | None = [], delete_existing: bool = True) -> None: ...
    async def process_application_commands(self, interaction: Interaction, auto_sync: bool | None = None) -> None: ...
    async def on_application_command_auto_complete(self, interaction: Interaction, command: ApplicationCommand) -> None: ...
    def slash_command[**P](self, name: str, description: str) -> Callable[[Callable[Concatenate[ApplicationContext, P], Coroutine[None, None, None]]], SlashCommand]: ... # STUB: CAP
    def user_command(self, **kwargs): ...
    def message_command(self, **kwargs): ...
    def application_command(self, **kwargs): ...
    def command(self, **kwargs): ...
    def create_group(self, name: str, description: str | None = None, guild_ids: list[int] | None = None, **kwargs) -> SlashCommandGroup: ...
    def group(self, name: str | None = None, description: str | None = None, guild_ids: list[int] | None = None) -> Callable[[type[SlashCommandGroup]], SlashCommandGroup]: ...
    slash_group = group
    def walk_application_commands(self) -> Generator[ApplicationCommand, None, None]: ...
    async def get_application_context(self, interaction: Interaction, cls: Any = ...) -> ApplicationContext: ...
    async def get_autocomplete_context(self, interaction: Interaction, cls: Any = ...) -> AutocompleteContext: ...
    async def invoke_application_command(self, ctx: ApplicationContext) -> None: ...

class BotBase(ApplicationCommandMixin, CogMixin, ABC, metaclass=abc.ABCMeta):
    description: Incomplete
    owner_id: Incomplete
    owner_ids: Incomplete
    auto_sync_commands: Incomplete
    debug_guilds: Incomplete
    default_command_contexts: Incomplete
    default_command_integration_types: Incomplete
    def __init__(self, description=None, *args, **options) -> None: ...
    async def on_connect(self) -> None: ...
    async def on_interaction(self, interaction) -> None: ...
    async def on_application_command_error(self, context: ApplicationContext, exception: DiscordException) -> None: ...
    def check(self, func): ...
    def add_check(self, func, *, call_once: bool = False) -> None: ...
    def remove_check(self, func, *, call_once: bool = False) -> None: ...
    def check_once(self, func): ...
    async def can_run(self, ctx: ApplicationContext, *, call_once: bool = False) -> bool: ...
    def before_invoke(self, coro): ...
    def after_invoke(self, coro): ...
    async def is_owner(self, user: User) -> bool: ...

class Bot(BotBase, Client): ...
class AutoShardedBot(BotBase, AutoShardedClient): ...
