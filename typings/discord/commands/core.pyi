from .. import Permissions
from ..enums import IntegrationType, InteractionContextType
from ..ext.commands.cooldowns import CooldownMapping, MaxConcurrency
from .context import ApplicationContext, AutocompleteContext
from .options import Option
from _typeshed import Incomplete
from typing import Any, Callable, Coroutine, Generator, Generic, TypeVar
from typing_extensions import Concatenate, ParamSpec

__all__ = ['_BaseCommand', 'ApplicationCommand', 'SlashCommand', 'slash_command', 'application_command', 'user_command', 'message_command', 'command', 'SlashCommandGroup', 'ContextMenuCommand', 'UserCommand', 'MessageCommand']

T = TypeVar('T')
CogT = TypeVar('CogT', bound='Cog')
Coro = TypeVar('Coro', bound=Callable[..., Coroutine[Any, Any, Any]])
P = ParamSpec('P')

class _BaseCommand: ...

class ApplicationCommand(_BaseCommand, Generic[CogT, P, T]):
    __original_kwargs__: dict[str, Any]
    cog: Incomplete
    module: Incomplete
    name: str
    checks: Incomplete
    id: int | None
    guild_ids: list[int] | None
    parent: Incomplete
    default_member_permissions: Permissions | None
    nsfw: bool | None
    contexts: set[InteractionContextType] | None
    integration_types: set[IntegrationType] | None
    def __init__(self, func: Callable, **kwargs) -> None: ...
    def __eq__(self, other) -> bool: ...
    async def __call__(self, ctx, *args, **kwargs): ...
    @property
    def callback(self) -> Callable[Concatenate[CogT, ApplicationContext, P], Coro[T]] | Callable[Concatenate[ApplicationContext, P], Coro[T]]: ...
    @callback.setter
    def callback(self, function: Callable[Concatenate[CogT, ApplicationContext, P], Coro[T]] | Callable[Concatenate[ApplicationContext, P], Coro[T]]) -> None: ...
    @property
    def guild_only(self) -> bool: ...
    @guild_only.setter
    def guild_only(self, value: bool) -> None: ...
    async def prepare(self, ctx: ApplicationContext) -> None: ...
    def is_on_cooldown(self, ctx: ApplicationContext) -> bool: ...
    def reset_cooldown(self, ctx: ApplicationContext) -> None: ...
    def get_cooldown_retry_after(self, ctx: ApplicationContext) -> float: ...
    async def invoke(self, ctx: ApplicationContext) -> None: ...
    async def can_run(self, ctx: ApplicationContext) -> bool: ...
    async def dispatch_error(self, ctx: ApplicationContext, error: Exception) -> None: ...
    on_error: Incomplete
    def error(self, coro): ...
    def has_error_handler(self) -> bool: ...
    def before_invoke(self, coro): ...
    def after_invoke(self, coro): ...
    async def call_before_hooks(self, ctx: ApplicationContext) -> None: ...
    async def call_after_hooks(self, ctx: ApplicationContext) -> None: ...
    @property
    def cooldown(self): ...
    @property
    def full_parent_name(self) -> str: ...
    @property
    def qualified_name(self) -> str: ...
    @property
    def qualified_id(self) -> int: ...
    def to_dict(self) -> dict[str, Any]: ...

class SlashCommand(ApplicationCommand):
    type: int
    __original_kwargs__: Incomplete
    def __new__(cls, *args, **kwargs) -> SlashCommand: ...
    callback: Incomplete
    name_localizations: dict[str, str]
    description: str
    description_localizations: dict[str, str]
    attached_to_group: bool
    options: list[Option]
    checks: Incomplete
    def __init__(self, func: Callable, *args, **kwargs) -> None: ...
    @property
    def cog(self): ...
    @cog.setter
    def cog(self, value) -> None: ...
    @property
    def is_subcommand(self) -> bool: ...
    @property
    def mention(self) -> str: ...
    def to_dict(self) -> dict: ...
    async def invoke_autocomplete_callback(self, ctx: AutocompleteContext): ...
    def copy(self): ...

class SlashCommandGroup(ApplicationCommand):
    __initial_commands__: list[SlashCommand | SlashCommandGroup]
    type: int
    __original_kwargs__: Incomplete
    def __new__(cls, *args, **kwargs) -> SlashCommandGroup: ...
    name: Incomplete
    description: Incomplete
    input_type: Incomplete
    subcommands: list[SlashCommand | SlashCommandGroup]
    guild_ids: Incomplete
    parent: Incomplete
    attached_to_group: bool
    checks: Incomplete
    cog: Incomplete
    id: Incomplete
    default_member_permissions: Permissions | None
    nsfw: bool | None
    contexts: set[InteractionContextType] | None
    integration_types: set[IntegrationType] | None
    name_localizations: dict[str, str]
    description_localizations: dict[str, str]
    def __init__(self, name: str, description: str | None = None, guild_ids: list[int] | None = None, parent: SlashCommandGroup | None = None, cooldown: CooldownMapping | None = None, max_concurrency: MaxConcurrency | None = None, **kwargs) -> None: ...
    @property
    def module(self) -> str | None: ...
    @property
    def guild_only(self) -> bool: ...
    @guild_only.setter
    def guild_only(self, value: bool) -> None: ...
    def to_dict(self) -> dict: ...
    def add_command(self, command: SlashCommand | SlashCommandGroup) -> None: ...
    def command(self, cls: type[T] = ..., **kwargs) -> Callable[[Callable], SlashCommand]: ...
    def create_subgroup(self, name: str, description: str | None = None, guild_ids: list[int] | None = None, **kwargs) -> SlashCommandGroup: ...
    def subgroup(self, name: str | None = None, description: str | None = None, guild_ids: list[int] | None = None) -> Callable[[type[SlashCommandGroup]], SlashCommandGroup]: ...
    async def invoke_autocomplete_callback(self, ctx: AutocompleteContext) -> None: ...
    async def call_before_hooks(self, ctx: ApplicationContext) -> None: ...
    async def call_after_hooks(self, ctx: ApplicationContext) -> None: ...
    def walk_commands(self) -> Generator[SlashCommand | SlashCommandGroup, None, None]: ...
    def copy(self): ...

class ContextMenuCommand(ApplicationCommand):
    __original_kwargs__: Incomplete
    def __new__(cls, *args, **kwargs) -> ContextMenuCommand: ...
    callback: Incomplete
    name_localizations: dict[str, str]
    description: str
    cog: Incomplete
    id: Incomplete
    parent: Incomplete
    def __init__(self, func: Callable, *args, **kwargs) -> None: ...
    def validate_parameters(self) -> None: ...
    @property
    def qualified_name(self): ...
    def to_dict(self) -> dict[str, str | int]: ...

class UserCommand(ContextMenuCommand):
    type: int
    __original_kwargs__: Incomplete
    def __new__(cls, *args, **kwargs) -> UserCommand: ...
    def copy(self): ...

class MessageCommand(ContextMenuCommand):
    type: int
    __original_kwargs__: Incomplete
    def __new__(cls, *args, **kwargs) -> MessageCommand: ...
    def copy(self): ...

def slash_command(**kwargs): ...
def user_command(**kwargs): ...
def message_command(**kwargs): ...
def application_command(cls=..., **attrs): ...
def command(**kwargs): ...
