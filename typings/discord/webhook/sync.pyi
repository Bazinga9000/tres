import threading
import types
from ..abc import Snowflake
from ..embeds import Embed
from ..file import File
from ..http import Route
from ..mentions import AllowedMentions
from ..message import Message
from ..types.webhook import Webhook as WebhookPayload
from .async_ import BaseWebhook
from _typeshed import Incomplete
from requests import Session
from typing import Any, Literal, overload

__all__ = ['SyncWebhook', 'SyncWebhookMessage']

class DeferredLock:
    lock: Incomplete
    delta: float | None
    def __init__(self, lock: threading.Lock) -> None: ...
    def __enter__(self): ...
    def delay_by(self, delta: float) -> None: ...
    def __exit__(self, type: type[BaseException] | None, value: BaseException | None, traceback: types.TracebackType | None) -> None: ...

class WebhookAdapter:
    def __init__(self) -> None: ...
    def request(self, route: Route, session: Session, *, payload: dict[str, Any] | None = None, multipart: list[dict[str, Any]] | None = None, files: list[File] | None = None, reason: str | None = None, auth_token: str | None = None, params: dict[str, Any] | None = None) -> Any: ...
    def delete_webhook(self, webhook_id: int, *, token: str | None = None, session: Session, reason: str | None = None): ...
    def delete_webhook_with_token(self, webhook_id: int, token: str, *, session: Session, reason: str | None = None): ...
    def edit_webhook(self, webhook_id: int, token: str, payload: dict[str, Any], *, session: Session, reason: str | None = None): ...
    def edit_webhook_with_token(self, webhook_id: int, token: str, payload: dict[str, Any], *, session: Session, reason: str | None = None): ...
    def execute_webhook(self, webhook_id: int, token: str, *, session: Session, payload: dict[str, Any] | None = None, multipart: list[dict[str, Any]] | None = None, files: list[File] | None = None, thread_id: int | None = None, thread_name: str | None = None, wait: bool = False): ...
    def get_webhook_message(self, webhook_id: int, token: str, message_id: int, *, session: Session, thread_id: int | None = None): ...
    def edit_webhook_message(self, webhook_id: int, token: str, message_id: int, *, session: Session, thread_id: int | None = None, payload: dict[str, Any] | None = None, multipart: list[dict[str, Any]] | None = None, files: list[File] | None = None): ...
    def delete_webhook_message(self, webhook_id: int, token: str, message_id: int, *, session: Session, thread_id: int | None = None): ...
    def fetch_webhook(self, webhook_id: int, token: str, *, session: Session): ...
    def fetch_webhook_with_token(self, webhook_id: int, token: str, *, session: Session): ...

class _WebhookContext(threading.local):
    adapter: WebhookAdapter | None

class SyncWebhookMessage(Message):
    def edit(self, content: str | None = ..., embeds: list[Embed] = ..., embed: Embed | None = ..., file: File = ..., files: list[File] = ..., allowed_mentions: AllowedMentions | None = None, suppress: bool | None = ...) -> SyncWebhookMessage: ...
    def delete(self, *, delay: float | None = None) -> None: ...

class SyncWebhook(BaseWebhook):
    session: Incomplete
    def __init__(self, data: WebhookPayload, session: Session, token: str | None = None, state=None) -> None: ...
    @property
    def url(self) -> str: ...
    @classmethod
    def partial(cls, id: int, token: str, *, session: Session = ..., bot_token: str | None = None) -> SyncWebhook: ...
    @classmethod
    def from_url(cls, url: str, *, session: Session = ..., bot_token: str | None = None) -> SyncWebhook: ...
    def fetch(self, *, prefer_auth: bool = True) -> SyncWebhook: ...
    def delete(self, *, reason: str | None = None, prefer_auth: bool = True) -> None: ...
    def edit(self, *, reason: str | None = None, name: str | None = ..., avatar: bytes | None = ..., channel: Snowflake | None = None, prefer_auth: bool = True) -> SyncWebhook: ...
    @overload
    def send(self, content: str = ..., *, username: str = ..., avatar_url: Any = ..., tts: bool = ..., file: File = ..., files: list[File] = ..., embed: Embed = ..., embeds: list[Embed] = ..., allowed_mentions: AllowedMentions = ..., thread: Snowflake = ..., thread_name: str | None = None, wait: Literal[True]) -> SyncWebhookMessage: ...
    @overload
    def send(self, content: str = ..., *, username: str = ..., avatar_url: Any = ..., tts: bool = ..., file: File = ..., files: list[File] = ..., embed: Embed = ..., embeds: list[Embed] = ..., allowed_mentions: AllowedMentions = ..., thread: Snowflake = ..., thread_name: str | None = None, wait: Literal[False] = ..., suppress: bool = ...) -> None: ...
    def fetch_message(self, id: int, *, thread_id: int | None = None) -> SyncWebhookMessage: ...
    def edit_message(self, message_id: int, *, content: str | None = ..., embeds: list[Embed] = ..., embed: Embed | None = ..., file: File = ..., files: list[File] = ..., allowed_mentions: AllowedMentions | None = None, thread: Snowflake | None = ..., suppress: bool = False) -> SyncWebhookMessage: ...
    def delete_message(self, message_id: int, *, thread_id: int | None = None) -> None: ...
