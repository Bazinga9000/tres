import aiohttp
import asyncio
import datetime
from ..abc import Snowflake
from ..asset import Asset
from ..channel import TextChannel
from ..embeds import Embed
from ..file import File
from ..guild import Guild
from ..http import Response, Route
from ..mentions import AllowedMentions
from ..message import Attachment, Message
from ..mixins import Hashable
from ..poll import Poll
from ..state import ConnectionState
from ..types.message import Message as MessagePayload
from ..types.webhook import FollowerWebhook as FollowerWebhookPayload, Webhook as WebhookPayload
from ..ui.view import View
from _typeshed import Incomplete
from typing import Any, Literal, NamedTuple, overload

__all__ = ['Webhook', 'WebhookMessage', 'PartialWebhookChannel', 'PartialWebhookGuild']

class AsyncDeferredLock:
    lock: Incomplete
    delta: float | None
    def __init__(self, lock: asyncio.Lock) -> None: ...
    async def __aenter__(self): ...
    def delay_by(self, delta: float) -> None: ...
    async def __aexit__(self, type, value, traceback) -> None: ...

class AsyncWebhookAdapter:
    def __init__(self) -> None: ...
    async def request(self, route: Route, session: aiohttp.ClientSession, *, payload: dict[str, Any] | None = None, multipart: list[dict[str, Any]] | None = None, proxy: str | None = None, proxy_auth: aiohttp.BasicAuth | None = None, files: list[File] | None = None, reason: str | None = None, auth_token: str | None = None, params: dict[str, Any] | None = None) -> Any: ...
    def delete_webhook(self, webhook_id: int, *, token: str | None = None, session: aiohttp.ClientSession, proxy: str | None = None, proxy_auth: aiohttp.BasicAuth | None = None, reason: str | None = None) -> Response[None]: ...
    def delete_webhook_with_token(self, webhook_id: int, token: str, *, session: aiohttp.ClientSession, proxy: str | None = None, proxy_auth: aiohttp.BasicAuth | None = None, reason: str | None = None) -> Response[None]: ...
    def edit_webhook(self, webhook_id: int, token: str, payload: dict[str, Any], *, session: aiohttp.ClientSession, proxy: str | None = None, proxy_auth: aiohttp.BasicAuth | None = None, reason: str | None = None) -> Response[WebhookPayload]: ...
    def edit_webhook_with_token(self, webhook_id: int, token: str, payload: dict[str, Any], *, session: aiohttp.ClientSession, proxy: str | None = None, proxy_auth: aiohttp.BasicAuth | None = None, reason: str | None = None) -> Response[WebhookPayload]: ...
    def execute_webhook(self, webhook_id: int, token: str, *, session: aiohttp.ClientSession, proxy: str | None = None, proxy_auth: aiohttp.BasicAuth | None = None, payload: dict[str, Any] | None = None, multipart: list[dict[str, Any]] | None = None, files: list[File] | None = None, thread_id: int | None = None, thread_name: str | None = None, wait: bool = False) -> Response[MessagePayload | None]: ...
    def get_webhook_message(self, webhook_id: int, token: str, message_id: int, *, session: aiohttp.ClientSession, proxy: str | None = None, proxy_auth: aiohttp.BasicAuth | None = None, thread_id: int | None = None) -> Response[MessagePayload]: ...
    def edit_webhook_message(self, webhook_id: int, token: str, message_id: int, *, session: aiohttp.ClientSession, proxy: str | None = None, proxy_auth: aiohttp.BasicAuth | None = None, thread_id: int | None = None, payload: dict[str, Any] | None = None, multipart: list[dict[str, Any]] | None = None, files: list[File] | None = None) -> Response[WebhookMessage]: ...
    def delete_webhook_message(self, webhook_id: int, token: str, message_id: int, *, session: aiohttp.ClientSession, proxy: str | None = None, proxy_auth: aiohttp.BasicAuth | None = None, thread_id: int | None = None) -> Response[None]: ...
    def fetch_webhook(self, webhook_id: int, token: str, *, session: aiohttp.ClientSession, proxy: str | None = None, proxy_auth: aiohttp.BasicAuth | None = None) -> Response[WebhookPayload | FollowerWebhookPayload]: ...
    def fetch_webhook_with_token(self, webhook_id: int, token: str, *, session: aiohttp.ClientSession, proxy: str | None = None, proxy_auth: aiohttp.BasicAuth | None = None) -> Response[WebhookPayload | FollowerWebhookPayload]: ...
    def create_interaction_response(self, interaction_id: int, token: str, *, session: aiohttp.ClientSession, proxy: str | None = None, proxy_auth: aiohttp.BasicAuth | None = None, type: int, data: dict[str, Any] | None = None, files: list[File] = None) -> Response[None]: ...
    def get_original_interaction_response(self, application_id: int, token: str, *, session: aiohttp.ClientSession, proxy: str | None = None, proxy_auth: aiohttp.BasicAuth | None = None) -> Response[MessagePayload]: ...
    def edit_original_interaction_response(self, application_id: int, token: str, *, session: aiohttp.ClientSession, proxy: str | None = None, proxy_auth: aiohttp.BasicAuth | None = None, payload: dict[str, Any] | None = None, multipart: list[dict[str, Any]] | None = None, files: list[File] | None = None) -> Response[MessagePayload]: ...
    def delete_original_interaction_response(self, application_id: int, token: str, *, session: aiohttp.ClientSession, proxy: str | None = None, proxy_auth: aiohttp.BasicAuth | None = None) -> Response[None]: ...

class ExecuteWebhookParameters(NamedTuple):
    payload: dict[str, Any] | None
    multipart: list[dict[str, Any]] | None
    files: list[File] | None

class PartialWebhookChannel(Hashable):
    id: Incomplete
    name: Incomplete
    def __init__(self, *, data) -> None: ...

class PartialWebhookGuild(Hashable):
    id: Incomplete
    name: Incomplete
    def __init__(self, *, data, state) -> None: ...
    @property
    def icon(self) -> Asset | None: ...

class _FriendlyHttpAttributeErrorHelper:
    def __getattr__(self, attr) -> None: ...

class _WebhookState:
    def __init__(self, webhook: Any, parent: ConnectionState | _WebhookState | None) -> None: ...
    def store_user(self, data): ...
    def create_user(self, data): ...
    @property
    def http(self): ...
    def __getattr__(self, attr): ...

class WebhookMessage(Message):
    async def edit(self, content: str | None = ..., embeds: list[Embed] = ..., embed: Embed | None = ..., file: File = ..., files: list[File] = ..., attachments: list[Attachment] = ..., view: View | None = ..., allowed_mentions: AllowedMentions | None = None, suppress: bool | None = ...) -> WebhookMessage: ...
    async def delete(self, *, delay: float | None = None) -> None: ...

class BaseWebhook(Hashable):
    auth_token: str | None
    def __init__(self, data: WebhookPayload | FollowerWebhookPayload, token: str | None = None, state: ConnectionState | None = None) -> None: ...
    def is_partial(self) -> bool: ...
    def is_authenticated(self) -> bool: ...
    @property
    def guild(self) -> Guild | None: ...
    @property
    def channel(self) -> TextChannel | None: ...
    @property
    def created_at(self) -> datetime.datetime: ...
    @property
    def avatar(self) -> Asset: ...

class Webhook(BaseWebhook):
    session: Incomplete
    proxy: str | None
    proxy_auth: aiohttp.BasicAuth | None
    def __init__(self, data: WebhookPayload | FollowerWebhookPayload, session: aiohttp.ClientSession, proxy: str | None = None, proxy_auth: aiohttp.BasicAuth | None = None, token: str | None = None, state=None) -> None: ...
    @property
    def url(self) -> str: ...
    @classmethod
    def partial(cls, id: int, token: str, *, session: aiohttp.ClientSession, proxy: str | None = None, proxy_auth: aiohttp.BasicAuth | None = None, bot_token: str | None = None) -> Webhook: ...
    @classmethod
    def from_url(cls, url: str, *, session: aiohttp.ClientSession, proxy: str | None = None, proxy_auth: aiohttp.BasicAuth | None = None, bot_token: str | None = None) -> Webhook: ...
    @classmethod
    def from_state(cls, data, state) -> Webhook: ...
    async def fetch(self, *, prefer_auth: bool = True) -> Webhook: ...
    async def delete(self, *, reason: str | None = None, prefer_auth: bool = True): ...
    async def edit(self, *, reason: str | None = None, name: str | None = ..., avatar: bytes | None = ..., channel: Snowflake | None = None, prefer_auth: bool = True) -> Webhook: ...
    @overload
    async def send(self, content: str = ..., *, username: str = ..., avatar_url: Any = ..., tts: bool = ..., ephemeral: bool = ..., file: File = ..., files: list[File] = ..., embed: Embed = ..., embeds: list[Embed] = ..., allowed_mentions: AllowedMentions = ..., view: View = ..., poll: Poll = ..., thread: Snowflake = ..., thread_name: str | None = None, applied_tags: list[Snowflake] = ..., wait: Literal[True], delete_after: float = None) -> WebhookMessage: ...
    @overload
    async def send(self, content: str = ..., *, username: str = ..., avatar_url: Any = ..., tts: bool = ..., ephemeral: bool = ..., file: File = ..., files: list[File] = ..., embed: Embed = ..., embeds: list[Embed] = ..., allowed_mentions: AllowedMentions = ..., view: View = ..., poll: Poll = ..., thread: Snowflake = ..., thread_name: str | None = None, applied_tags: list[Snowflake] = ..., wait: Literal[False] = ..., delete_after: float = None) -> None: ...
    async def fetch_message(self, id: int, *, thread_id: int | None = None) -> WebhookMessage: ...
    async def edit_message(self, message_id: int, *, content: str | None = ..., embeds: list[Embed] = ..., embed: Embed | None = ..., file: File = ..., files: list[File] = ..., attachments: list[Attachment] = ..., view: View | None = ..., allowed_mentions: AllowedMentions | None = None, thread: Snowflake | None = ..., suppress: bool = False) -> WebhookMessage: ...
    async def delete_message(self, message_id: int, *, thread_id: int | None = None) -> None: ...
