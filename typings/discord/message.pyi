import datetime
import io
from .abc import GuildChannel, MessageableChannel, PartialMessageableChannel, Snowflake
from .components import Component
from .embeds import Embed
from .emoji import Emoji
from .enums import MessageType
from .file import File
from .flags import AttachmentFlags, MessageFlags
from .guild import Guild
from .interactions import MessageInteraction
from .member import Member
from .mentions import AllowedMentions
from .mixins import Hashable
from .object import Object
from .partial_emoji import PartialEmoji
from .poll import Poll
from .reaction import Reaction
from .role import Role
from .state import ConnectionState
from .sticker import StickerItem
from .threads import Thread
from .types.message import Attachment as AttachmentPayload, Message as MessagePayload, MessageActivity as MessageActivityPayload, MessageApplication as MessageApplicationPayload, MessageCall as MessageCallPayload, MessageReference as MessageReferencePayload
from .types.threads import ThreadArchiveDuration
from .ui.view import View
from .user import User
from _typeshed import Incomplete
from os import PathLike
from typing import Any, TypeVar, overload

__all__ = ['Attachment', 'Message', 'PartialMessage', 'MessageReference', 'MessageCall', 'DeletedReferencedMessage']

MR = TypeVar('MR', bound='MessageReference')
EmojiInputType = Emoji | PartialEmoji | str

class Attachment(Hashable):
    id: int
    size: int
    height: int | None
    width: int | None
    filename: str
    title: str | None
    url: str
    proxy_url: str
    content_type: str | None
    ephemeral: bool
    description: str | None
    duration_secs: float | None
    waveform: str | None
    flags: AttachmentFlags
    hm: str | None
    def __init__(self, *, data: AttachmentPayload, state: ConnectionState) -> None: ...
    @property
    def expires_at(self) -> datetime.datetime | None: ...
    @property
    def issued_at(self) -> datetime.datetime | None: ...
    def is_spoiler(self) -> bool: ...
    async def save(self, fp: io.BufferedIOBase | PathLike, *, seek_begin: bool = True, use_cached: bool = False) -> int: ...
    async def read(self, *, use_cached: bool = False) -> bytes: ...
    async def to_file(self, *, use_cached: bool = False, spoiler: bool = False) -> File: ...
    def to_dict(self) -> AttachmentPayload: ...

class DeletedReferencedMessage:
    def __init__(self, parent: MessageReference) -> None: ...
    @property
    def id(self) -> int: ...
    @property
    def channel_id(self) -> int: ...
    @property
    def guild_id(self) -> int | None: ...

class MessageReference:
    resolved: Message | DeletedReferencedMessage | None
    message_id: int | None
    channel_id: int
    guild_id: int | None
    fail_if_not_exists: bool
    def __init__(self, *, message_id: int, channel_id: int, guild_id: int | None = None, fail_if_not_exists: bool = True) -> None: ...
    @classmethod
    def with_state(cls, state: ConnectionState, data: MessageReferencePayload) -> MR: ...
    @classmethod
    def from_message(cls, message: Message, *, fail_if_not_exists: bool = True) -> MR: ...
    @property
    def cached_message(self) -> Message | None: ...
    @property
    def jump_url(self) -> str: ...
    def to_dict(self) -> MessageReferencePayload: ...
    to_message_reference_dict = to_dict

class MessageCall:
    def __init__(self, state: ConnectionState, data: MessageCallPayload) -> None: ...
    @property
    def participants(self) -> list[User | Object]: ...
    @property
    def ended_at(self) -> datetime.datetime | None: ...

class Message(Hashable):
    guild: Guild | None
    reference: MessageReference | None
    mentions: list[User | Member]
    author: User | Member
    role_mentions: list[Role]
    id: int
    webhook_id: int | None
    reactions: list[Reaction]
    attachments: list[Attachment]
    embeds: list[Embed]
    application: MessageApplicationPayload | None
    activity: MessageActivityPayload | None
    channel: MessageableChannel
    type: MessageType
    pinned: bool
    flags: MessageFlags
    mention_everyone: bool
    tts: bool
    content: str
    nonce: int | str | None
    stickers: list[StickerItem]
    components: list[Component]
    interaction_metadata: Incomplete
    thread: Thread | None
    call: MessageCall | None
    def __init__(self, *, state: ConnectionState, channel: MessageableChannel, data: MessagePayload) -> None: ...
    @property
    def interaction(self) -> MessageInteraction | None: ...
    @interaction.setter
    def interaction(self, value: MessageInteraction | None) -> None: ...
    def raw_mentions(self) -> list[int]: ...
    def raw_channel_mentions(self) -> list[int]: ...
    def raw_role_mentions(self) -> list[int]: ...
    def channel_mentions(self) -> list[GuildChannel]: ...
    def clean_content(self) -> str: ...
    @property
    def created_at(self) -> datetime.datetime: ...
    @property
    def edited_at(self) -> datetime.datetime | None: ...
    @property
    def jump_url(self) -> str: ...
    @property
    def poll(self) -> Poll | None: ...
    def is_system(self) -> bool: ...
    def system_content(self) -> str: ...
    async def delete(self, *, delay: float | None = None, reason: str | None = None) -> None: ...
    @overload
    async def edit(self, *, content: str | None = ..., embed: Embed | None = ..., embeds: list[Embed] = ..., file: File | None = ..., files: list[File] | None = ..., attachments: list[Attachment] = ..., suppress: bool = ..., delete_after: float | None = ..., allowed_mentions: AllowedMentions | None = ..., view: View | None = ...) -> Message: ...
    async def publish(self) -> None: ...
    async def pin(self, *, reason: str | None = None) -> None: ...
    async def unpin(self, *, reason: str | None = None) -> None: ...
    async def add_reaction(self, emoji: EmojiInputType) -> None: ...
    async def remove_reaction(self, emoji: EmojiInputType | Reaction, member: Snowflake) -> None: ...
    async def clear_reaction(self, emoji: EmojiInputType | Reaction) -> None: ...
    async def clear_reactions(self) -> None: ...
    async def create_thread(self, *, name: str, auto_archive_duration: ThreadArchiveDuration = ..., slowmode_delay: int = ...) -> Thread: ...
    async def reply(self, content: str | None = None, **kwargs) -> Message: ...
    async def end_poll(self) -> Message: ...
    def to_reference(self, *, fail_if_not_exists: bool = True) -> MessageReference: ...
    def to_message_reference_dict(self) -> MessageReferencePayload: ...

class PartialMessage(Hashable):
    jump_url: str
    delete: Incomplete
    publish: Incomplete
    pin: Incomplete
    unpin: Incomplete
    add_reaction: Incomplete
    remove_reaction: Incomplete
    clear_reaction: Incomplete
    clear_reactions: Incomplete
    reply: Incomplete
    to_reference: Incomplete
    to_message_reference_dict: Incomplete
    channel: PartialMessageableChannel
    id: int
    def __init__(self, *, channel: PartialMessageableChannel, id: int) -> None: ...
    pinned: Incomplete
    @property
    def created_at(self) -> datetime.datetime: ...
    @property
    def poll(self) -> Poll | None: ...
    def guild(self) -> Guild | None: ...
    async def fetch(self) -> Message: ...
    async def edit(self, **fields: Any) -> Message | None: ...
    async def end_poll(self) -> Message: ...
