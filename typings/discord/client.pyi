from .errors import *
from .gateway import *
import asyncio
from .abc import GuildChannel, PrivateChannel, Snowflake, SnowflakeTime
from .activity import ActivityTypes, BaseActivity
from .appinfo import AppInfo, PartialAppInfo
from .application_role_connection import ApplicationRoleConnectionMetadata
from .channel import DMChannel, PartialMessageable
from .emoji import Emoji
from .enums import ChannelType, Status
from .flags import ApplicationFlags, Intents
from .guild import Guild
from .http import HTTPClient
from .invite import Invite
from .iterators import EntitlementIterator, GuildIterator
from .member import Member
from .mentions import AllowedMentions
from .message import Message
from .monetization import SKU
from .poll import Poll
from .stage_instance import StageInstance
from .sticker import GuildSticker, StandardSticker, StickerPack
from .template import Template
from .threads import Thread
from .ui.view import View
from .user import ClientUser, User
from .voice_client import VoiceProtocol
from .webhook import Webhook
from .widget import Widget
from types import TracebackType
from typing import Any, Callable, Coroutine, Generator, Sequence, TypeVar

__all__ = ['Client']

Coro = TypeVar('Coro', bound=Callable[..., Coroutine[Any, Any, Any]])

class Client:
    ws: DiscordWebSocket
    loop: asyncio.AbstractEventLoop
    shard_id: int | None
    shard_count: int | None
    http: HTTPClient
    def __init__(self, *, loop: asyncio.AbstractEventLoop | None = None, **options: Any) -> None: ...
    async def __aenter__(self) -> Client: ...
    async def __aexit__(self, exc_t: BaseException | None, exc_v: BaseException | None, exc_tb: TracebackType | None) -> None: ...
    @property
    def latency(self) -> float: ...
    def is_ws_ratelimited(self) -> bool: ...
    @property
    def user(self) -> ClientUser | None: ...
    @property
    def guilds(self) -> list[Guild]: ...
    @property
    def emojis(self) -> list[Emoji]: ...
    @property
    def stickers(self) -> list[GuildSticker]: ...
    @property
    def polls(self) -> list[Poll]: ...
    @property
    def cached_messages(self) -> Sequence[Message]: ...
    @property
    def private_channels(self) -> list[PrivateChannel]: ...
    @property
    def voice_clients(self) -> list[VoiceProtocol]: ...
    @property
    def application_id(self) -> int | None: ...
    @property
    def application_flags(self) -> ApplicationFlags: ...
    def is_ready(self) -> bool: ...
    def dispatch(self, event: str, *args: Any, **kwargs: Any) -> None: ...
    async def on_error(self, event_method: str, *args: Any, **kwargs: Any) -> None: ...
    async def before_identify_hook(self, shard_id: int | None, *, initial: bool = False) -> None: ...
    async def login(self, token: str) -> None: ...
    async def connect(self, *, reconnect: bool = True) -> None: ...
    async def close(self) -> None: ...
    def clear(self) -> None: ...
    async def start(self, token: str, *, reconnect: bool = True) -> None: ...
    def run(self, *args: Any, **kwargs: Any) -> None: ...
    def is_closed(self) -> bool: ...
    @property
    def activity(self) -> ActivityTypes | None: ...
    @activity.setter
    def activity(self, value: ActivityTypes | None) -> None: ...
    @property
    def status(self) -> Status: ...
    @status.setter
    def status(self, value: Status) -> None: ...
    @property
    def allowed_mentions(self) -> AllowedMentions | None: ...
    @allowed_mentions.setter
    def allowed_mentions(self, value: AllowedMentions | None) -> None: ...
    @property
    def intents(self) -> Intents: ...
    @property
    def users(self) -> list[User]: ...
    async def fetch_application(self, application_id: int, /) -> PartialAppInfo: ...
    def get_channel(self, id: int, /) -> GuildChannel | Thread | PrivateChannel | None: ...
    def get_message(self, id: int, /) -> Message | None: ...
    def get_partial_messageable(self, id: int, *, type: ChannelType | None = None) -> PartialMessageable: ...
    def get_stage_instance(self, id: int, /) -> StageInstance | None: ...
    def get_guild(self, id: int, /) -> Guild | None: ...
    def get_user(self, id: int, /) -> User | None: ...
    def get_emoji(self, id: int, /) -> Emoji | None: ...
    def get_sticker(self, id: int, /) -> GuildSticker | None: ...
    def get_poll(self, id: int, /) -> Poll | None: ...
    def get_all_channels(self) -> Generator[GuildChannel, None, None]: ...
    def get_all_members(self) -> Generator[Member, None, None]: ...
    async def get_or_fetch_user(self, id: int, /) -> User | None: ...
    async def wait_until_ready(self) -> None: ...
    def wait_for(self, event: str, *, check: Callable[..., bool] | None = None, timeout: float | None = None) -> Any: ...
    def add_listener(self, func: Coro, name: str = ...) -> None: ...
    def remove_listener(self, func: Coro, name: str = ...) -> None: ...
    def listen(self, name: str = ..., once: bool = False) -> Callable[[Coro], Coro]: ...
    def event(self, coro: Coro) -> Coro: ...
    async def change_presence(self, *, activity: BaseActivity | None = None, status: Status | None = None): ...
    def fetch_guilds(self, *, limit: int | None = 100, before: SnowflakeTime = None, after: SnowflakeTime = None) -> GuildIterator: ...
    async def fetch_template(self, code: Template | str) -> Template: ...
    async def fetch_guild(self, guild_id: int, /, *, with_counts: bool = True) -> Guild: ...
    async def create_guild(self, *, name: str, icon: bytes = ..., code: str = ...) -> Guild: ...
    async def fetch_stage_instance(self, channel_id: int, /) -> StageInstance: ...
    async def fetch_invite(self, url: Invite | str, *, with_counts: bool = True, with_expiration: bool = True, event_id: int | None = None) -> Invite: ...
    async def delete_invite(self, invite: Invite | str) -> None: ...
    async def fetch_widget(self, guild_id: int, /) -> Widget: ...
    async def application_info(self) -> AppInfo: ...
    async def fetch_user(self, user_id: int, /) -> User: ...
    async def fetch_channel(self, channel_id: int, /) -> GuildChannel | PrivateChannel | Thread: ...
    async def fetch_webhook(self, webhook_id: int, /) -> Webhook: ...
    async def fetch_sticker(self, sticker_id: int, /) -> StandardSticker | GuildSticker: ...
    async def fetch_premium_sticker_packs(self) -> list[StickerPack]: ...
    async def create_dm(self, user: Snowflake) -> DMChannel: ...
    def add_view(self, view: View, *, message_id: int | None = None) -> None: ...
    @property
    def persistent_views(self) -> Sequence[View]: ...
    async def fetch_role_connection_metadata_records(self) -> list[ApplicationRoleConnectionMetadata]: ...
    async def update_role_connection_metadata_records(self, *role_connection_metadata) -> list[ApplicationRoleConnectionMetadata]: ...
    async def fetch_skus(self) -> list[SKU]: ...
    def entitlements(self, user: Snowflake | None = None, skus: list[Snowflake] | None = None, before: SnowflakeTime | None = None, after: SnowflakeTime | None = None, limit: int | None = 100, guild: Snowflake | None = None, exclude_ended: bool = False) -> EntitlementIterator: ...
    @property
    def store_url(self) -> str: ...
