from .gateway import *
import asyncio
from .activity import BaseActivity
from .client import Client
from .enums import Status
from .gateway import DiscordWebSocket
from typing import Any, Callable, TypeVar

__all__ = ['AutoShardedClient', 'ShardInfo']

EI = TypeVar('EI', bound='EventItem')

class EventType:
    close: int
    reconnect: int
    resume: int
    identify: int
    terminate: int
    clean_close: int

class EventItem:
    type: int
    shard: Shard | None
    error: Exception | None
    def __init__(self, etype: int, shard: Shard | None, error: Exception | None) -> None: ...
    def __lt__(self, other: EI) -> bool: ...
    def __eq__(self, other: EI) -> bool: ...
    def __hash__(self) -> int: ...

class Shard:
    ws: DiscordWebSocket
    loop: asyncio.AbstractEventLoop
    def __init__(self, ws: DiscordWebSocket, client: AutoShardedClient, queue_put: Callable[[EventItem], None]) -> None: ...
    @property
    def id(self) -> int: ...
    def launch(self) -> None: ...
    async def close(self) -> None: ...
    async def disconnect(self) -> None: ...
    async def worker(self) -> None: ...
    async def reidentify(self, exc: ReconnectWebSocket) -> None: ...
    async def reconnect(self) -> None: ...

class ShardInfo:
    id: int
    shard_count: int | None
    def __init__(self, parent: Shard, shard_count: int | None) -> None: ...
    def is_closed(self) -> bool: ...
    async def disconnect(self) -> None: ...
    async def reconnect(self) -> None: ...
    async def connect(self) -> None: ...
    @property
    def latency(self) -> float: ...
    def is_ws_ratelimited(self) -> bool: ...

class AutoShardedClient(Client):
    shard_ids: list[int] | None
    def __init__(self, *args: Any, loop: asyncio.AbstractEventLoop | None = None, **kwargs: Any) -> None: ...
    @property
    def latency(self) -> float: ...
    @property
    def latencies(self) -> list[tuple[int, float]]: ...
    def get_shard(self, shard_id: int) -> ShardInfo | None: ...
    @property
    def shards(self) -> dict[int, ShardInfo]: ...
    async def launch_shard(self, gateway: str, shard_id: int, *, initial: bool = False) -> None: ...
    async def launch_shards(self) -> None: ...
    async def connect(self, *, reconnect: bool = True) -> None: ...
    async def close(self) -> None: ...
    async def change_presence(self, *, activity: BaseActivity | None = None, status: Status | None = None, shard_id: int = None) -> None: ...
    def is_ws_ratelimited(self) -> bool: ...
