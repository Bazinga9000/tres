import datetime
from . import utils
from .abc import Snowflake
from .emoji import Emoji
from .enums import PollLayoutType
from .iterators import VoteIterator
from .message import Message, PartialMessage
from .partial_emoji import PartialEmoji
from .types.poll import Poll as PollPayload, PollAnswer as PollAnswerPayload, PollAnswerCount as PollAnswerCountPayload, PollMedia as PollMediaPayload, PollResults as PollResultsPayload
from _typeshed import Incomplete

__all__ = ['PollMedia', 'PollAnswer', 'PollAnswerCount', 'PollResults', 'Poll']

class PollMedia:
    text: str
    emoji: Emoji | PartialEmoji | str | None
    def __init__(self, text: str, emoji: Emoji | PartialEmoji | str | None = None) -> None: ...
    def to_dict(self) -> PollMediaPayload: ...
    @classmethod
    def from_dict(cls, data: PollMediaPayload, message: Message | PartialMessage | None = None) -> PollMedia: ...

class PollAnswer:
    media: Incomplete
    id: Incomplete
    def __init__(self, text: str, emoji: Emoji | PartialEmoji | str | None = None) -> None: ...
    @property
    def text(self) -> str: ...
    @property
    def emoji(self) -> Emoji | PartialEmoji | None: ...
    @property
    def count(self) -> int | None: ...
    def to_dict(self) -> PollAnswerPayload: ...
    @classmethod
    def from_dict(cls, data: PollAnswerPayload, poll=None, message: Message | PartialMessage | None = None) -> PollAnswer: ...
    def voters(self, *, limit: int | None = None, after: Snowflake | None = None) -> VoteIterator: ...

class PollAnswerCount:
    id: Incomplete
    count: int
    me: Incomplete
    def __init__(self, data: PollAnswerCountPayload) -> None: ...
    def to_dict(self) -> PollAnswerCountPayload: ...

class PollResults:
    is_finalized: Incomplete
    def __init__(self, data: PollResultsPayload) -> None: ...
    def to_dict(self) -> PollResultsPayload: ...
    @property
    def answer_counts(self) -> list[PollAnswerCount]: ...
    def total_votes(self) -> int: ...

class Poll:
    question: Incomplete
    answers: list[PollAnswer]
    duration: int | None
    allow_multiselect: bool
    layout_type: PollLayoutType
    results: Incomplete
    def __init__(self, question: PollMedia | str, *, answers: list[PollAnswer] | None = None, duration: int | None = 24, allow_multiselect: bool | None = False, layout_type: PollLayoutType | None = ...) -> None: ...
    @utils.cached_property
    def expiry(self) -> datetime.datetime | None: ...
    def to_dict(self) -> PollPayload: ...
    @classmethod
    def from_dict(cls, data: PollPayload, message: Message | PartialMessage | None = None) -> Poll: ...
    def has_ended(self) -> bool | None: ...
    def total_votes(self) -> int | None: ...
    def get_answer(self, id) -> PollAnswer | None: ...
    def add_answer(self, text: str, *, emoji: Emoji | PartialEmoji | str | None = None) -> Poll: ...
    async def end(self) -> Message: ...
