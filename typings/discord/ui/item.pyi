from ..components import Component
from ..enums import ComponentType
from ..interactions import Interaction
from typing import Any, Callable, Coroutine, Generic, TypeVar

__all__ = ['Item']

I = TypeVar('I', bound='Item')
V = TypeVar('V', bound='View', covariant=True)
ItemCallbackType = Callable[[Any, I, Interaction], Coroutine[Any, Any, Any]]

class Item(Generic[V]):
    __item_repr_attributes__: tuple[str, ...]
    def __init__(self) -> None: ...
    def to_component_dict(self) -> dict[str, Any]: ...
    def refresh_component(self, component: Component) -> None: ...
    def refresh_state(self, interaction: Interaction) -> None: ...
    @classmethod
    def from_component(cls, component: Component) -> I: ...
    @property
    def type(self) -> ComponentType: ...
    def is_dispatchable(self) -> bool: ...
    def is_persistent(self) -> bool: ...
    @property
    def row(self) -> int | None: ...
    @row.setter
    def row(self, value: int | None): ...
    @property
    def width(self) -> int: ...
    @property
    def view(self) -> V | None: ...
    async def callback(self, interaction: Interaction): ...
