from ..abc import GuildChannel
from ..components import SelectMenu, SelectOption
from ..emoji import Emoji
from ..enums import ChannelType, ComponentType
from ..interactions import Interaction
from ..member import Member
from ..partial_emoji import PartialEmoji
from ..role import Role
from ..threads import Thread
from ..types.components import SelectMenu as SelectMenuPayload
from ..user import User
from .item import Item, ItemCallbackType
from _typeshed import Incomplete
from typing import Callable, TypeVar

__all__ = ['Select', 'select', 'string_select', 'user_select', 'role_select', 'mentionable_select', 'channel_select']

S = TypeVar('S', bound='Select')
V = TypeVar('V', bound='View', covariant=True)

class Select(Item[V]):
    __item_repr_attributes__: tuple[str, ...]
    row: Incomplete
    def __init__(self, select_type: ComponentType = ..., *, custom_id: str | None = None, placeholder: str | None = None, min_values: int = 1, max_values: int = 1, options: list[SelectOption] = None, channel_types: list[ChannelType] = None, disabled: bool = False, row: int | None = None) -> None: ...
    @property
    def custom_id(self) -> str: ...
    @custom_id.setter
    def custom_id(self, value: str): ...
    @property
    def placeholder(self) -> str | None: ...
    @placeholder.setter
    def placeholder(self, value: str | None): ...
    @property
    def min_values(self) -> int: ...
    @min_values.setter
    def min_values(self, value: int): ...
    @property
    def max_values(self) -> int: ...
    @max_values.setter
    def max_values(self, value: int): ...
    @property
    def disabled(self) -> bool: ...
    @disabled.setter
    def disabled(self, value: bool): ...
    @property
    def channel_types(self) -> list[ChannelType]: ...
    @channel_types.setter
    def channel_types(self, value: list[ChannelType]): ...
    @property
    def options(self) -> list[SelectOption]: ...
    @options.setter
    def options(self, value: list[SelectOption]): ...
    def add_option(self, *, label: str, value: str = ..., description: str | None = None, emoji: str | Emoji | PartialEmoji | None = None, default: bool = False) -> None: ...
    def append_option(self, option: SelectOption): ...
    @property
    def values(self) -> list[str] | list[Member | User] | list[Role] | list[Member | User | Role] | list[GuildChannel | Thread]: ...
    @property
    def width(self) -> int: ...
    def to_component_dict(self) -> SelectMenuPayload: ...
    def refresh_component(self, component: SelectMenu) -> None: ...
    def refresh_state(self, interaction: Interaction) -> None: ...
    @classmethod
    def from_component(cls, component: SelectMenu) -> S: ...
    @property
    def type(self) -> ComponentType: ...
    def is_dispatchable(self) -> bool: ...

def select(select_type: ComponentType = ..., *, placeholder: str | None = None, custom_id: str | None = None, min_values: int = 1, max_values: int = 1, options: list[SelectOption] = ..., channel_types: list[ChannelType] = ..., disabled: bool = False, row: int | None = None) -> Callable[[ItemCallbackType], ItemCallbackType]: ...
def string_select(*, placeholder: str | None = None, custom_id: str | None = None, min_values: int = 1, max_values: int = 1, options: list[SelectOption] = ..., disabled: bool = False, row: int | None = None) -> Callable[[ItemCallbackType], ItemCallbackType]: ...
def user_select(*, placeholder: str | None = None, custom_id: str | None = None, min_values: int = 1, max_values: int = 1, disabled: bool = False, row: int | None = None) -> Callable[[ItemCallbackType], ItemCallbackType]: ...
def role_select(*, placeholder: str | None = None, custom_id: str | None = None, min_values: int = 1, max_values: int = 1, disabled: bool = False, row: int | None = None) -> Callable[[ItemCallbackType], ItemCallbackType]: ...
def mentionable_select(*, placeholder: str | None = None, custom_id: str | None = None, min_values: int = 1, max_values: int = 1, disabled: bool = False, row: int | None = None) -> Callable[[ItemCallbackType], ItemCallbackType]: ...
def channel_select(*, placeholder: str | None = None, custom_id: str | None = None, min_values: int = 1, max_values: int = 1, disabled: bool = False, channel_types: list[ChannelType] = ..., row: int | None = None) -> Callable[[ItemCallbackType], ItemCallbackType]: ...
