from ..interactions import Interaction
from ..state import ConnectionState
from .input_text import InputText
from _typeshed import Incomplete
from typing import Any

__all__ = ['Modal', 'ModalStore']

class Modal:
    timeout: float | None
    loop: Incomplete
    def __init__(self, *children: InputText, title: str, custom_id: str | None = None, timeout: float | None = None) -> None: ...
    @property
    def title(self) -> str: ...
    @title.setter
    def title(self, value: str): ...
    @property
    def children(self) -> list[InputText]: ...
    @children.setter
    def children(self, value: list[InputText]): ...
    @property
    def custom_id(self) -> str: ...
    @custom_id.setter
    def custom_id(self, value: str): ...
    async def callback(self, interaction: Interaction): ...
    def to_components(self) -> list[dict[str, Any]]: ...
    def add_item(self, item: InputText): ...
    def remove_item(self, item: InputText): ...
    def stop(self) -> None: ...
    async def wait(self) -> bool: ...
    def to_dict(self): ...
    async def on_error(self, error: Exception, interaction: Interaction) -> None: ...
    async def on_timeout(self) -> None: ...

class _ModalWeights:
    weights: list[int]
    def __init__(self, children: list[InputText]) -> None: ...
    def find_open_space(self, item: InputText) -> int: ...
    def add_item(self, item: InputText) -> None: ...
    def remove_item(self, item: InputText) -> None: ...
    def clear(self) -> None: ...

class ModalStore:
    def __init__(self, state: ConnectionState) -> None: ...
    def add_modal(self, modal: Modal, user_id: int): ...
    def remove_modal(self, modal: Modal, user_id): ...
    async def dispatch(self, user_id: int, custom_id: str, interaction: Interaction): ...
