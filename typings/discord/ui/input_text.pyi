from ..enums import ComponentType, InputTextStyle
from ..types.components import InputText as InputTextComponentPayload
from _typeshed import Incomplete

__all__ = ['InputText']

class InputText:
    row: Incomplete
    def __init__(self, *, style: InputTextStyle = ..., custom_id: str | None = None, label: str, placeholder: str | None = None, min_length: int | None = None, max_length: int | None = None, required: bool | None = True, value: str | None = None, row: int | None = None) -> None: ...
    @property
    def type(self) -> ComponentType: ...
    @property
    def style(self) -> InputTextStyle: ...
    @style.setter
    def style(self, value: InputTextStyle): ...
    @property
    def custom_id(self) -> str: ...
    @custom_id.setter
    def custom_id(self, value: str): ...
    @property
    def label(self) -> str: ...
    @label.setter
    def label(self, value: str): ...
    @property
    def placeholder(self) -> str | None: ...
    @placeholder.setter
    def placeholder(self, value: str | None): ...
    @property
    def min_length(self) -> int | None: ...
    @min_length.setter
    def min_length(self, value: int | None): ...
    @property
    def max_length(self) -> int | None: ...
    @max_length.setter
    def max_length(self, value: int | None): ...
    @property
    def required(self) -> bool | None: ...
    @required.setter
    def required(self, value: bool | None): ...
    @property
    def value(self) -> str | None: ...
    @value.setter
    def value(self, value: str | None): ...
    @property
    def width(self) -> int: ...
    def to_component_dict(self) -> InputTextComponentPayload: ...
    def refresh_state(self, data) -> None: ...
