from discord.ui.view import View
from ..components import Button as ButtonComponent
from ..emoji import Emoji
from ..enums import ButtonStyle, ComponentType
from ..partial_emoji import PartialEmoji
from .item import Item, ItemCallbackType
from _typeshed import Incomplete
from typing import Callable, TypeVar

__all__ = ['Button', 'button']

B = TypeVar('B', bound='Button')
V = TypeVar('V', bound='View', covariant=True)

class Button(Item[V]):
    __item_repr_attributes__: tuple[str, ...]
    row: Incomplete
    def __init__(self, *, style: ButtonStyle = ..., label: str | None = None, disabled: bool = False, custom_id: str | None = None, url: str | None = None, emoji: str | Emoji | PartialEmoji | None = None, sku_id: int | None = None, row: int | None = None) -> None: ...
    @property
    def style(self) -> ButtonStyle: ...
    @style.setter
    def style(self, value: ButtonStyle): ...
    @property
    def custom_id(self) -> str | None: ...
    @custom_id.setter
    def custom_id(self, value: str | None): ...
    @property
    def url(self) -> str | None: ...
    @url.setter
    def url(self, value: str | None): ...
    @property
    def disabled(self) -> bool: ...
    @disabled.setter
    def disabled(self, value: bool): ...
    @property
    def label(self) -> str | None: ...
    @label.setter
    def label(self, value: str | None): ...
    @property
    def emoji(self) -> PartialEmoji | None: ...
    @emoji.setter
    def emoji(self, value: str | Emoji | PartialEmoji | None): ...
    @property
    def sku_id(self) -> int | None: ...
    @sku_id.setter
    def sku_id(self, value: int | None): ...
    @classmethod
    def from_component(cls, button: ButtonComponent) -> B: ...
    @property
    def type(self) -> ComponentType: ...
    def to_component_dict(self): ...
    def is_dispatchable(self) -> bool: ...
    def is_persistent(self) -> bool: ...
    def refresh_component(self, button: ButtonComponent) -> None: ...

type GenericItemCallbackType[T: Item[View]] = Callable[[ItemCallbackType[T]], ItemCallbackType[T]] # STUB: CAP
def button[T: Item[View]](*, label: str | None = None, custom_id: str | None = None, disabled: bool = False, style: ButtonStyle = ..., emoji: str | Emoji | PartialEmoji | None = None, row: int | None = None) -> GenericItemCallbackType[T]: ... # STUB: CAP
