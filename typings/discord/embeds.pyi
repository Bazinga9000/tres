import datetime
from .colour import Colour
from _typeshed import Incomplete
from discord.types.embed import Embed as EmbedData, EmbedType
from typing import Any, Mapping, TypeVar

__all__ = ['Embed', 'EmbedField', 'EmbedAuthor', 'EmbedFooter', 'EmbedMedia', 'EmbedProvider']

E = TypeVar('E', bound='Embed')

class EmbedAuthor:
    name: str
    url: str | None
    icon_url: str | None
    proxy_icon_url: str | None
    def __init__(self, name: str, url: str | None = None, icon_url: str | None = None) -> None: ...
    @classmethod
    def from_dict(cls, data: dict[str, str | None]) -> EmbedAuthor: ...
    def to_dict(self) -> dict[str, str]: ...
    def __len__(self) -> int: ...

class EmbedFooter:
    text: str
    icon_url: str | None
    proxy_icon_url: str | None
    def __init__(self, text: str, icon_url: str | None = None) -> None: ...
    @classmethod
    def from_dict(cls, data: dict[str, str | None]) -> EmbedFooter: ...
    def to_dict(self) -> dict[str, Any]: ...
    def __len__(self) -> int: ...

class EmbedMedia:
    url: str
    proxy_url: str | None
    height: int | None
    width: int | None
    def __init__(self, url: str) -> None: ...
    @classmethod
    def from_dict(cls, data: dict[str, str | int]) -> EmbedMedia: ...

class EmbedProvider:
    name: str | None
    url: str | None
    @classmethod
    def from_dict(cls, data: dict[str, str | None]) -> EmbedProvider: ...

class EmbedField:
    name: Incomplete
    value: Incomplete
    inline: Incomplete
    def __init__(self, name: str, value: str, inline: bool | None = False) -> None: ...
    @classmethod
    def from_dict(cls, data: dict[str, str | bool]) -> EmbedField: ...
    def to_dict(self) -> dict[str, str | bool | None]: ...

class Embed:
    title: Incomplete
    type: Incomplete
    url: Incomplete
    description: Incomplete
    def __init__(self, *, colour: int | Colour | None = None, color: int | Colour | None = None, title: Any | None = None, type: EmbedType = 'rich', url: Any | None = None, description: Any | None = None, timestamp: datetime.datetime | None = None, fields: list[EmbedField] | None = None, author: EmbedAuthor | None = None, footer: EmbedFooter | None = None, image: str | EmbedMedia | None = None, thumbnail: str | EmbedMedia | None = None) -> None: ...
    @classmethod
    def from_dict(cls, data: Mapping[str, Any]) -> E: ...
    def copy(self) -> E: ...
    def __len__(self) -> int: ...
    def __bool__(self) -> bool: ...
    @property
    def colour(self) -> Colour | None: ...
    @colour.setter
    def colour(self, value: int | Colour | None): ...
    color = colour
    @property
    def timestamp(self) -> datetime.datetime | None: ...
    @timestamp.setter
    def timestamp(self, value: datetime.datetime | None): ...
    @property
    def footer(self) -> EmbedFooter | None: ...
    @footer.setter
    def footer(self, value: EmbedFooter | None): ...
    def set_footer(self, *, text: Any | None = None, icon_url: Any | None = None) -> E: ...
    def remove_footer(self) -> E: ...
    @property
    def image(self) -> EmbedMedia | None: ...
    @image.setter
    def image(self, value: str | EmbedMedia | None): ...
    def set_image(self, *, url: Any | None) -> E: ...
    def remove_image(self) -> E: ...
    @property
    def thumbnail(self) -> EmbedMedia | None: ...
    @thumbnail.setter
    def thumbnail(self, value: str | EmbedMedia | None): ...
    def set_thumbnail(self, *, url: Any | None) -> E: ...
    def remove_thumbnail(self) -> E: ...
    @property
    def video(self) -> EmbedMedia | None: ...
    @property
    def provider(self) -> EmbedProvider | None: ...
    @property
    def author(self) -> EmbedAuthor | None: ...
    @author.setter
    def author(self, value: EmbedAuthor | None): ...
    def set_author(self, *, name: Any, url: Any | None = None, icon_url: Any | None = None) -> E: ...
    def remove_author(self) -> E: ...
    @property
    def fields(self) -> list[EmbedField]: ...
    @fields.setter
    def fields(self, value: list[EmbedField]) -> None: ...
    def append_field(self, field: EmbedField) -> None: ...
    def add_field(self, *, name: str, value: str, inline: bool = True) -> E: ...
    def insert_field_at(self, index: int, *, name: Any, value: Any, inline: bool = True) -> E: ...
    def clear_fields(self) -> None: ...
    def remove_field(self, index: int) -> None: ...
    def set_field_at(self, index: int, *, name: Any, value: Any, inline: bool = True) -> E: ...
    def to_dict(self) -> EmbedData: ...
