from .guild import Guild
from .state import ConnectionState
from .types.template import Template as TemplatePayload
from _typeshed import Incomplete
from typing import Any

__all__ = ['Template']

class _FriendlyHttpAttributeErrorHelper:
    def __getattr__(self, attr) -> None: ...

class _PartialTemplateState:
    http: Incomplete
    def __init__(self, *, state) -> None: ...
    @property
    def shard_count(self): ...
    @property
    def user(self): ...
    @property
    def self_id(self): ...
    @property
    def member_cache_flags(self): ...
    def store_emoji(self, guild, packet) -> None: ...
    async def query_members(self, **kwargs: Any): ...
    def __getattr__(self, attr) -> None: ...

class Template:
    def __init__(self, *, state: ConnectionState, data: TemplatePayload) -> None: ...
    async def create_guild(self, name: str, icon: Any = None) -> Guild: ...
    async def sync(self) -> Template: ...
    async def edit(self, *, name: str = ..., description: str | None = ...) -> Template: ...
    async def delete(self) -> None: ...
    @property
    def url(self) -> str: ...
