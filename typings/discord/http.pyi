import aiohttp
import asyncio
from . import __version__ as __version__, utils as utils
from .enums import AuditLogAction as AuditLogAction, InteractionResponseType as InteractionResponseType
from .errors import DiscordServerError as DiscordServerError, Forbidden as Forbidden, GatewayNotFound as GatewayNotFound, HTTPException as HTTPException, InvalidArgument as InvalidArgument, LoginFailure as LoginFailure, NotFound as NotFound
from .file import File as File
from .gateway import DiscordClientWebSocketResponse as DiscordClientWebSocketResponse
from .types import appinfo as appinfo, application_role_connection as application_role_connection, audit_log as audit_log, automod as automod, channel as channel, components as components, embed as embed, emoji as emoji, guild as guild, integration as integration, interactions as interactions, invite as invite, member as member, message as message, monetization as monetization, onboarding as onboarding, poll as poll, role as role, scheduled_events as scheduled_events, sticker as sticker, template as template, threads as threads, user as user, webhook as webhook, welcome_screen as welcome_screen, widget as widget
from .types.snowflake import Snowflake as Snowflake, SnowflakeList as SnowflakeList
from .utils import MISSING as MISSING, warn_deprecated as warn_deprecated
from _typeshed import Incomplete
from types import TracebackType
from typing import Any, Coroutine, Iterable, Sequence, TypeVar

T = TypeVar('T')
BE = TypeVar('BE', bound=BaseException)
MU = TypeVar('MU', bound='MaybeUnlock')
Response = Coroutine[Any, Any, T]
API_VERSION: int

async def json_or_text(response: aiohttp.ClientResponse) -> dict[str, Any] | str: ...

class Route:
    path: str
    method: str
    url: str
    channel_id: Snowflake | None
    guild_id: Snowflake | None
    webhook_id: Snowflake | None
    webhook_token: str | None
    def __init__(self, method: str, path: str, **parameters: Any) -> None: ...
    @property
    def base(self) -> str: ...
    @property
    def bucket(self) -> str: ...

class MaybeUnlock:
    lock: asyncio.Lock
    def __init__(self, lock: asyncio.Lock) -> None: ...
    def __enter__(self) -> MU: ...
    def defer(self) -> None: ...
    def __exit__(self, exc_type: type[BE] | None, exc: BE | None, traceback: TracebackType | None) -> None: ...

class HTTPClient:
    loop: asyncio.AbstractEventLoop
    connector: Incomplete
    token: str | None
    bot_token: bool
    proxy: str | None
    proxy_auth: aiohttp.BasicAuth | None
    use_clock: bool
    user_agent: str
    def __init__(self, connector: aiohttp.BaseConnector | None = None, *, proxy: str | None = None, proxy_auth: aiohttp.BasicAuth | None = None, loop: asyncio.AbstractEventLoop | None = None, unsync_clock: bool = True) -> None: ...
    def recreate(self) -> None: ...
    async def ws_connect(self, url: str, *, compress: int = 0) -> Any: ...
    async def request(self, route: Route, *, files: Sequence[File] | None = None, form: Iterable[dict[str, Any]] | None = None, **kwargs: Any) -> Any: ...
    async def get_from_cdn(self, url: str) -> bytes: ...
    async def close(self) -> None: ...
    async def static_login(self, token: str) -> user.User: ...
    def logout(self) -> Response[None]: ...
    def start_group(self, user_id: Snowflake, recipients: list[int]) -> Response[channel.GroupDMChannel]: ...
    def leave_group(self, channel_id) -> Response[None]: ...
    def start_private_message(self, user_id: Snowflake) -> Response[channel.DMChannel]: ...
    def send_message(self, channel_id: Snowflake, content: str | None, *, tts: bool = False, embed: embed.Embed | None = None, embeds: list[embed.Embed] | None = None, nonce: int | str | None = None, enforce_nonce: bool | None = None, allowed_mentions: message.AllowedMentions | None = None, message_reference: message.MessageReference | None = None, stickers: list[sticker.StickerItem] | None = None, components: list[components.Component] | None = None, flags: int | None = None, poll: poll.Poll | None = None) -> Response[message.Message]: ...
    def send_typing(self, channel_id: Snowflake) -> Response[None]: ...
    def send_multipart_helper(self, route: Route, *, files: Sequence[File], content: str | None = None, tts: bool = False, embed: embed.Embed | None = None, embeds: Iterable[embed.Embed | None] | None = None, nonce: int | str | None = None, enforce_nonce: bool | None = None, allowed_mentions: message.AllowedMentions | None = None, message_reference: message.MessageReference | None = None, stickers: list[sticker.StickerItem] | None = None, components: list[components.Component] | None = None, flags: int | None = None, poll: poll.Poll | None = None) -> Response[message.Message]: ...
    def send_files(self, channel_id: Snowflake, *, files: Sequence[File], content: str | None = None, tts: bool = False, embed: embed.Embed | None = None, embeds: list[embed.Embed] | None = None, nonce: int | str | None = None, enforce_nonce: bool | None = None, allowed_mentions: message.AllowedMentions | None = None, message_reference: message.MessageReference | None = None, stickers: list[sticker.StickerItem] | None = None, components: list[components.Component] | None = None, flags: int | None = None, poll: poll.Poll | None = None) -> Response[message.Message]: ...
    def edit_multipart_helper(self, route: Route, files: Sequence[File], **payload) -> Response[message.Message]: ...
    def edit_files(self, channel_id: Snowflake, message_id: Snowflake, files: Sequence[File], **fields) -> Response[message.Message]: ...
    def delete_message(self, channel_id: Snowflake, message_id: Snowflake, *, reason: str | None = None) -> Response[None]: ...
    def delete_messages(self, channel_id: Snowflake, message_ids: SnowflakeList, *, reason: str | None = None) -> Response[None]: ...
    def edit_message(self, channel_id: Snowflake, message_id: Snowflake, **fields: Any) -> Response[message.Message]: ...
    def add_reaction(self, channel_id: Snowflake, message_id: Snowflake, emoji: str) -> Response[None]: ...
    def remove_reaction(self, channel_id: Snowflake, message_id: Snowflake, emoji: str, member_id: Snowflake) -> Response[None]: ...
    def remove_own_reaction(self, channel_id: Snowflake, message_id: Snowflake, emoji: str) -> Response[None]: ...
    def get_reaction_users(self, channel_id: Snowflake, message_id: Snowflake, emoji: str, limit: int, after: Snowflake | None = None, type: int | None = None) -> Response[list[user.User]]: ...
    def clear_reactions(self, channel_id: Snowflake, message_id: Snowflake) -> Response[None]: ...
    def clear_single_reaction(self, channel_id: Snowflake, message_id: Snowflake, emoji: str) -> Response[None]: ...
    def get_message(self, channel_id: Snowflake, message_id: Snowflake) -> Response[message.Message]: ...
    def get_channel(self, channel_id: Snowflake) -> Response[channel.Channel]: ...
    def logs_from(self, channel_id: Snowflake, limit: int, before: Snowflake | None = None, after: Snowflake | None = None, around: Snowflake | None = None) -> Response[list[message.Message]]: ...
    def publish_message(self, channel_id: Snowflake, message_id: Snowflake) -> Response[message.Message]: ...
    def pin_message(self, channel_id: Snowflake, message_id: Snowflake, reason: str | None = None) -> Response[None]: ...
    def unpin_message(self, channel_id: Snowflake, message_id: Snowflake, reason: str | None = None) -> Response[None]: ...
    def pins_from(self, channel_id: Snowflake) -> Response[list[message.Message]]: ...
    def kick(self, user_id: Snowflake, guild_id: Snowflake, reason: str | None = None) -> Response[None]: ...
    def ban(self, user_id: Snowflake, guild_id: Snowflake, delete_message_seconds: int = None, reason: str | None = None) -> Response[None]: ...
    def bulk_ban(self, user_ids: list[Snowflake], guild_id: Snowflake, delete_message_seconds: int = None, reason: str | None = None) -> Response[guild.GuildBulkBan]: ...
    def unban(self, user_id: Snowflake, guild_id: Snowflake, *, reason: str | None = None) -> Response[None]: ...
    def guild_voice_state(self, user_id: Snowflake, guild_id: Snowflake, *, mute: bool | None = None, deafen: bool | None = None, reason: str | None = None) -> Response[member.Member]: ...
    def edit_profile(self, payload: dict[str, Any]) -> Response[user.User]: ...
    def change_my_nickname(self, guild_id: Snowflake, nickname: str, *, reason: str | None = None) -> Response[member.Nickname]: ...
    def change_nickname(self, guild_id: Snowflake, user_id: Snowflake, nickname: str, *, reason: str | None = None) -> Response[member.Member]: ...
    def edit_my_voice_state(self, guild_id: Snowflake, payload: dict[str, Any]) -> Response[None]: ...
    def edit_voice_state(self, guild_id: Snowflake, user_id: Snowflake, payload: dict[str, Any]) -> Response[None]: ...
    def edit_member(self, guild_id: Snowflake, user_id: Snowflake, *, reason: str | None = None, **fields: Any) -> Response[member.MemberWithUser]: ...
    def edit_channel(self, channel_id: Snowflake, *, reason: str | None = None, **options: Any) -> Response[channel.Channel]: ...
    def bulk_channel_update(self, guild_id: Snowflake, data: list[guild.ChannelPositionUpdate], *, reason: str | None = None) -> Response[None]: ...
    def create_channel(self, guild_id: Snowflake, channel_type: channel.ChannelType, *, reason: str | None = None, **options: Any) -> Response[channel.GuildChannel]: ...
    def delete_channel(self, channel_id: Snowflake, *, reason: str | None = None) -> Response[None]: ...
    def start_thread_with_message(self, channel_id: Snowflake, message_id: Snowflake, *, name: str, auto_archive_duration: threads.ThreadArchiveDuration, rate_limit_per_user: int, reason: str | None = None) -> Response[threads.Thread]: ...
    def start_thread_without_message(self, channel_id: Snowflake, *, name: str, auto_archive_duration: threads.ThreadArchiveDuration, type: threads.ThreadType, rate_limit_per_user: int, invitable: bool, reason: str | None = None) -> Response[threads.Thread]: ...
    def start_forum_thread(self, channel_id: Snowflake, content: str | None, *, name: str, auto_archive_duration: threads.ThreadArchiveDuration, rate_limit_per_user: int, invitable: bool = True, applied_tags: SnowflakeList | None = None, reason: str | None = None, files: Sequence[File] | None = None, embed: embed.Embed | None = None, embeds: list[embed.Embed] | None = None, nonce: int | str | None = None, allowed_mentions: message.AllowedMentions | None = None, stickers: list[sticker.StickerItem] | None = None, components: list[components.Component] | None = None) -> Response[threads.Thread]: ...
    def join_thread(self, channel_id: Snowflake) -> Response[None]: ...
    def add_user_to_thread(self, channel_id: Snowflake, user_id: Snowflake) -> Response[None]: ...
    def leave_thread(self, channel_id: Snowflake) -> Response[None]: ...
    def remove_user_from_thread(self, channel_id: Snowflake, user_id: Snowflake) -> Response[None]: ...
    def get_public_archived_threads(self, channel_id: Snowflake, before: Snowflake | None = None, limit: int = 50) -> Response[threads.ThreadPaginationPayload]: ...
    def get_private_archived_threads(self, channel_id: Snowflake, before: Snowflake | None = None, limit: int = 50) -> Response[threads.ThreadPaginationPayload]: ...
    def get_joined_private_archived_threads(self, channel_id: Snowflake, before: Snowflake | None = None, limit: int = 50) -> Response[threads.ThreadPaginationPayload]: ...
    def get_active_threads(self, guild_id: Snowflake) -> Response[threads.ThreadPaginationPayload]: ...
    def get_thread_members(self, channel_id: Snowflake) -> Response[list[threads.ThreadMember]]: ...
    def create_webhook(self, channel_id: Snowflake, *, name: str, avatar: bytes | None = None, reason: str | None = None) -> Response[webhook.Webhook]: ...
    def channel_webhooks(self, channel_id: Snowflake) -> Response[list[webhook.Webhook]]: ...
    def guild_webhooks(self, guild_id: Snowflake) -> Response[list[webhook.Webhook]]: ...
    def get_webhook(self, webhook_id: Snowflake) -> Response[webhook.Webhook]: ...
    def follow_webhook(self, channel_id: Snowflake, webhook_channel_id: Snowflake, reason: str | None = None) -> Response[None]: ...
    def get_guilds(self, limit: int, before: Snowflake | None = None, after: Snowflake | None = None) -> Response[list[guild.Guild]]: ...
    def leave_guild(self, guild_id: Snowflake) -> Response[None]: ...
    def get_guild(self, guild_id: Snowflake, *, with_counts: bool = True) -> Response[guild.Guild]: ...
    def delete_guild(self, guild_id: Snowflake) -> Response[None]: ...
    def create_guild(self, name: str, icon: str | None) -> Response[guild.Guild]: ...
    def edit_guild(self, guild_id: Snowflake, *, reason: str | None = None, **fields: Any) -> Response[guild.Guild]: ...
    def edit_guild_mfa(self, guild_id: Snowflake, required: bool, *, reason: str | None) -> Response[guild.GuildMFAModify]: ...
    def get_template(self, code: str) -> Response[template.Template]: ...
    def guild_templates(self, guild_id: Snowflake) -> Response[list[template.Template]]: ...
    def create_template(self, guild_id: Snowflake, payload: template.CreateTemplate) -> Response[template.Template]: ...
    def sync_template(self, guild_id: Snowflake, code: str) -> Response[template.Template]: ...
    def edit_template(self, guild_id: Snowflake, code: str, payload) -> Response[template.Template]: ...
    def delete_template(self, guild_id: Snowflake, code: str) -> Response[None]: ...
    def create_from_template(self, code: str, name: str, icon: str | None) -> Response[guild.Guild]: ...
    def get_bans(self, guild_id: Snowflake, limit: int | None = None, before: Snowflake | None = None, after: Snowflake | None = None) -> Response[list[guild.Ban]]: ...
    def get_ban(self, user_id: Snowflake, guild_id: Snowflake) -> Response[guild.Ban]: ...
    def get_vanity_code(self, guild_id: Snowflake) -> Response[invite.VanityInvite]: ...
    def get_all_guild_channels(self, guild_id: Snowflake) -> Response[list[guild.GuildChannel]]: ...
    def get_members(self, guild_id: Snowflake, limit: int, after: Snowflake | None) -> Response[list[member.MemberWithUser]]: ...
    def search_members(self, guild_id: Snowflake, query: str, limit: int) -> Response[list[member.MemberWithUser]]: ...
    def get_member(self, guild_id: Snowflake, member_id: Snowflake) -> Response[member.MemberWithUser]: ...
    def prune_members(self, guild_id: Snowflake, days: int, compute_prune_count: bool, roles: list[str], *, reason: str | None = None) -> Response[guild.GuildPrune]: ...
    def estimate_pruned_members(self, guild_id: Snowflake, days: int, roles: list[str]) -> Response[guild.GuildPrune]: ...
    def get_sticker(self, sticker_id: Snowflake) -> Response[sticker.Sticker]: ...
    def list_premium_sticker_packs(self) -> Response[sticker.ListPremiumStickerPacks]: ...
    def get_all_guild_stickers(self, guild_id: Snowflake) -> Response[list[sticker.GuildSticker]]: ...
    def get_guild_sticker(self, guild_id: Snowflake, sticker_id: Snowflake) -> Response[sticker.GuildSticker]: ...
    def create_guild_sticker(self, guild_id: Snowflake, payload: sticker.CreateGuildSticker, file: File, reason: str) -> Response[sticker.GuildSticker]: ...
    def modify_guild_sticker(self, guild_id: Snowflake, sticker_id: Snowflake, payload: sticker.EditGuildSticker, reason: str | None) -> Response[sticker.GuildSticker]: ...
    def delete_guild_sticker(self, guild_id: Snowflake, sticker_id: Snowflake, reason: str | None) -> Response[None]: ...
    def get_all_custom_emojis(self, guild_id: Snowflake) -> Response[list[emoji.Emoji]]: ...
    def get_custom_emoji(self, guild_id: Snowflake, emoji_id: Snowflake) -> Response[emoji.Emoji]: ...
    def create_custom_emoji(self, guild_id: Snowflake, name: str, image: bytes, *, roles: SnowflakeList | None = None, reason: str | None = None) -> Response[emoji.Emoji]: ...
    def delete_custom_emoji(self, guild_id: Snowflake, emoji_id: Snowflake, *, reason: str | None = None) -> Response[None]: ...
    def edit_custom_emoji(self, guild_id: Snowflake, emoji_id: Snowflake, *, payload: dict[str, Any], reason: str | None = None) -> Response[emoji.Emoji]: ...
    def get_all_integrations(self, guild_id: Snowflake) -> Response[list[integration.Integration]]: ...
    def create_integration(self, guild_id: Snowflake, type: integration.IntegrationType, id: int) -> Response[None]: ...
    def edit_integration(self, guild_id: Snowflake, integration_id: Snowflake, **payload: Any) -> Response[None]: ...
    def sync_integration(self, guild_id: Snowflake, integration_id: Snowflake) -> Response[None]: ...
    def delete_integration(self, guild_id: Snowflake, integration_id: Snowflake, *, reason: str | None = None) -> Response[None]: ...
    def get_audit_logs(self, guild_id: Snowflake, limit: int = 100, before: Snowflake | None = None, after: Snowflake | None = None, user_id: Snowflake | None = None, action_type: AuditLogAction | None = None) -> Response[audit_log.AuditLog]: ...
    def get_widget(self, guild_id: Snowflake) -> Response[widget.Widget]: ...
    def edit_widget(self, guild_id: Snowflake, payload) -> Response[widget.WidgetSettings]: ...
    def create_invite(self, channel_id: Snowflake, *, reason: str | None = None, max_age: int = 0, max_uses: int = 0, temporary: bool = False, unique: bool = True, target_type: invite.InviteTargetType | None = None, target_user_id: Snowflake | None = None, target_application_id: Snowflake | None = None) -> Response[invite.Invite]: ...
    def get_invite(self, invite_id: str, *, with_counts: bool = True, with_expiration: bool = True, guild_scheduled_event_id: int | None = None) -> Response[invite.Invite]: ...
    def invites_from(self, guild_id: Snowflake) -> Response[list[invite.Invite]]: ...
    def invites_from_channel(self, channel_id: Snowflake) -> Response[list[invite.Invite]]: ...
    def delete_invite(self, invite_id: str, *, reason: str | None = None) -> Response[None]: ...
    def get_roles(self, guild_id: Snowflake) -> Response[list[role.Role]]: ...
    def edit_role(self, guild_id: Snowflake, role_id: Snowflake, *, reason: str | None = None, **fields: Any) -> Response[role.Role]: ...
    def delete_role(self, guild_id: Snowflake, role_id: Snowflake, *, reason: str | None = None) -> Response[None]: ...
    def replace_roles(self, user_id: Snowflake, guild_id: Snowflake, role_ids: list[int], *, reason: str | None = None) -> Response[member.MemberWithUser]: ...
    def create_role(self, guild_id: Snowflake, *, reason: str | None = None, **fields: Any) -> Response[role.Role]: ...
    def move_role_position(self, guild_id: Snowflake, positions: list[guild.RolePositionUpdate], *, reason: str | None = None) -> Response[list[role.Role]]: ...
    def add_role(self, guild_id: Snowflake, user_id: Snowflake, role_id: Snowflake, *, reason: str | None = None) -> Response[None]: ...
    def remove_role(self, guild_id: Snowflake, user_id: Snowflake, role_id: Snowflake, *, reason: str | None = None) -> Response[None]: ...
    def edit_channel_permissions(self, channel_id: Snowflake, target: Snowflake, allow: int | str, deny: int | str, type: channel.OverwriteType, *, reason: str | None = None) -> Response[None]: ...
    def delete_channel_permissions(self, channel_id: Snowflake, target: channel.OverwriteType, *, reason: str | None = None) -> Response[None]: ...
    def get_welcome_screen(self, guild_id: Snowflake) -> Response[welcome_screen.WelcomeScreen]: ...
    def edit_welcome_screen(self, guild_id: Snowflake, payload: Any, *, reason: str | None = None) -> Response[welcome_screen.WelcomeScreen]: ...
    def move_member(self, user_id: Snowflake, guild_id: Snowflake, channel_id: Snowflake, *, reason: str | None = None) -> Response[member.MemberWithUser]: ...
    def set_voice_channel_status(self, channel_id: Snowflake, status: str | None, *, reason: str | None = None) -> Response[None]: ...
    def get_stage_instance(self, channel_id: Snowflake) -> Response[channel.StageInstance]: ...
    def create_stage_instance(self, *, reason: str | None, **payload: Any) -> Response[channel.StageInstance]: ...
    def edit_stage_instance(self, channel_id: Snowflake, *, reason: str | None = None, **payload: Any) -> Response[None]: ...
    def delete_stage_instance(self, channel_id: Snowflake, *, reason: str | None = None) -> Response[None]: ...
    def get_scheduled_events(self, guild_id: Snowflake, with_user_count: bool = True) -> Response[list[scheduled_events.ScheduledEvent]]: ...
    def get_scheduled_event(self, guild_id: Snowflake, event_id: Snowflake, with_user_count: bool = True) -> Response[scheduled_events.ScheduledEvent]: ...
    def create_scheduled_event(self, guild_id: Snowflake, reason: str | None = None, **payload: Any) -> Response[scheduled_events.ScheduledEvent]: ...
    def delete_scheduled_event(self, guild_id: Snowflake, event_id: Snowflake) -> Response[None]: ...
    def edit_scheduled_event(self, guild_id: Snowflake, event_id: Snowflake, reason: str | None = None, **payload: Any) -> Response[scheduled_events.ScheduledEvent]: ...
    def get_scheduled_event_users(self, guild_id: Snowflake, event_id: Snowflake, limit: int, with_member: bool = False, before: Snowflake = None, after: Snowflake = None) -> Response[list[scheduled_events.ScheduledEventSubscriber]]: ...
    def get_global_commands(self, application_id: Snowflake, *, with_localizations: bool = True, locale: str = None) -> Response[list[interactions.ApplicationCommand]]: ...
    def get_global_command(self, application_id: Snowflake, command_id: Snowflake, locale: str = None) -> Response[interactions.ApplicationCommand]: ...
    def upsert_global_command(self, application_id: Snowflake, payload) -> Response[interactions.ApplicationCommand]: ...
    def edit_global_command(self, application_id: Snowflake, command_id: Snowflake, payload: interactions.EditApplicationCommand) -> Response[interactions.ApplicationCommand]: ...
    def delete_global_command(self, application_id: Snowflake, command_id: Snowflake) -> Response[None]: ...
    def bulk_upsert_global_commands(self, application_id: Snowflake, payload) -> Response[list[interactions.ApplicationCommand]]: ...
    def get_guild_commands(self, application_id: Snowflake, guild_id: Snowflake) -> Response[list[interactions.ApplicationCommand]]: ...
    def get_guild_command(self, application_id: Snowflake, guild_id: Snowflake, command_id: Snowflake) -> Response[interactions.ApplicationCommand]: ...
    def upsert_guild_command(self, application_id: Snowflake, guild_id: Snowflake, payload: interactions.EditApplicationCommand) -> Response[interactions.ApplicationCommand]: ...
    def edit_guild_command(self, application_id: Snowflake, guild_id: Snowflake, command_id: Snowflake, payload: interactions.EditApplicationCommand) -> Response[interactions.ApplicationCommand]: ...
    def delete_guild_command(self, application_id: Snowflake, guild_id: Snowflake, command_id: Snowflake) -> Response[None]: ...
    def bulk_upsert_guild_commands(self, application_id: Snowflake, guild_id: Snowflake, payload: list[interactions.EditApplicationCommand]) -> Response[list[interactions.ApplicationCommand]]: ...
    def get_auto_moderation_rules(self, guild_id: Snowflake) -> Response[list[automod.AutoModRule]]: ...
    def get_auto_moderation_rule(self, guild_id: Snowflake, rule_id: Snowflake) -> Response[automod.AutoModRule]: ...
    def create_auto_moderation_rule(self, guild_id: Snowflake, payload: automod.CreateAutoModRule, reason: str | None = None) -> Response[automod.AutoModRule]: ...
    def edit_auto_moderation_rule(self, guild_id: Snowflake, rule_id: Snowflake, payload: automod.EditAutoModRule, reason: str | None = None) -> Response[automod.AutoModRule]: ...
    def delete_auto_moderation_rule(self, guild_id: Snowflake, rule_id: Snowflake, reason: str | None = None) -> Response[None]: ...
    def create_interaction_response(self, interaction_id: Snowflake, token: str, *, type: InteractionResponseType, data: interactions.InteractionApplicationCommandCallbackData | None = None) -> Response[None]: ...
    def get_original_interaction_response(self, application_id: Snowflake, token: str) -> Response[message.Message]: ...
    def edit_original_interaction_response(self, application_id: Snowflake, token: str, file: File | None = None, content: str | None = None, embeds: list[embed.Embed] | None = None, allowed_mentions: message.AllowedMentions | None = None) -> Response[message.Message]: ...
    def delete_original_interaction_response(self, application_id: Snowflake, token: str) -> Response[None]: ...
    def create_followup_message(self, application_id: Snowflake, token: str, files: list[File] | None = None, content: str | None = None, tts: bool = False, embeds: list[embed.Embed] | None = None, allowed_mentions: message.AllowedMentions | None = None) -> Response[message.Message]: ...
    def edit_followup_message(self, application_id: Snowflake, token: str, message_id: Snowflake, file: File | None = None, content: str | None = None, embeds: list[embed.Embed] | None = None, allowed_mentions: message.AllowedMentions | None = None) -> Response[message.Message]: ...
    def delete_followup_message(self, application_id: Snowflake, token: str, message_id: Snowflake) -> Response[None]: ...
    def get_guild_application_command_permissions(self, application_id: Snowflake, guild_id: Snowflake) -> Response[list[interactions.GuildApplicationCommandPermissions]]: ...
    def get_application_command_permissions(self, application_id: Snowflake, guild_id: Snowflake, command_id: Snowflake) -> Response[interactions.GuildApplicationCommandPermissions]: ...
    def edit_application_command_permissions(self, application_id: Snowflake, guild_id: Snowflake, command_id: Snowflake, payload: interactions.BaseGuildApplicationCommandPermissions) -> Response[None]: ...
    def bulk_edit_guild_application_command_permissions(self, application_id: Snowflake, guild_id: Snowflake, payload: list[interactions.PartialGuildApplicationCommandPermissions]) -> Response[None]: ...
    def get_application_role_connection_metadata_records(self, application_id: Snowflake) -> Response[list[application_role_connection.ApplicationRoleConnectionMetadata]]: ...
    def update_application_role_connection_metadata_records(self, application_id: Snowflake, payload: list[application_role_connection.ApplicationRoleConnectionMetadata]) -> Response[list[application_role_connection.ApplicationRoleConnectionMetadata]]: ...
    def list_skus(self, application_id: Snowflake) -> Response[list[monetization.SKU]]: ...
    def list_entitlements(self, application_id: Snowflake, *, user_id: Snowflake | None = None, sku_ids: list[Snowflake] | None = None, before: Snowflake | None = None, after: Snowflake | None = None, limit: int | None = None, guild_id: Snowflake | None = None, exclude_ended: bool | None = None) -> Response[list[monetization.Entitlement]]: ...
    def consume_entitlement(self, application_id: Snowflake, entitlement_id: Snowflake) -> Response[None]: ...
    def create_test_entitlement(self, application_id: Snowflake, payload: monetization.CreateTestEntitlementPayload) -> Response[monetization.Entitlement]: ...
    def delete_test_entitlement(self, application_id: Snowflake, entitlement_id: Snowflake) -> Response[None]: ...
    def get_onboarding(self, guild_id: Snowflake) -> Response[onboarding.Onboarding]: ...
    def edit_onboarding(self, guild_id: Snowflake, payload: Any, *, reason: str | None = None) -> Response[onboarding.Onboarding]: ...
    def expire_poll(self, channel_id: Snowflake, message_id: Snowflake) -> Response[message.Message]: ...
    def get_answer_voters(self, channel_id: Snowflake, message_id: Snowflake, answer_id: int, limit: int, after: Snowflake | None = None) -> Response[list[user.User]]: ...
    def application_info(self) -> Response[appinfo.AppInfo]: ...
    def get_application(self, application_id: Snowflake, /) -> Response[appinfo.PartialAppInfo]: ...
    async def get_gateway(self, *, encoding: str = 'json', zlib: bool = True) -> str: ...
    async def get_bot_gateway(self, *, encoding: str = 'json', zlib: bool = True) -> tuple[int, str]: ...
    def get_user(self, user_id: Snowflake) -> Response[user.User]: ...
