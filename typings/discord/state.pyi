from .channel import *
from .raw_models import *
import asyncio
from . import utils as utils
from .abc import PrivateChannel as PrivateChannel
from .activity import BaseActivity as BaseActivity
from .audit_logs import AuditLogEntry as AuditLogEntry
from .automod import AutoModRule as AutoModRule
from .client import Client as Client
from .emoji import Emoji as Emoji
from .enums import ChannelType as ChannelType, InteractionType as InteractionType, ScheduledEventStatus as ScheduledEventStatus, Status as Status, try_enum as try_enum
from .flags import ApplicationFlags as ApplicationFlags, Intents as Intents, MemberCacheFlags as MemberCacheFlags
from .gateway import DiscordWebSocket as DiscordWebSocket
from .guild import Guild as Guild, GuildChannel as GuildChannel, VocalGuildChannel as VocalGuildChannel
from .http import HTTPClient as HTTPClient
from .interactions import Interaction as Interaction
from .invite import Invite as Invite
from .member import Member as Member
from .mentions import AllowedMentions as AllowedMentions
from .message import Message as Message, MessageableChannel as MessageableChannel
from .monetization import Entitlement as Entitlement
from .object import Object as Object
from .partial_emoji import PartialEmoji as PartialEmoji
from .poll import Poll as Poll, PollAnswerCount as PollAnswerCount
from .role import Role as Role
from .scheduled_events import ScheduledEvent as ScheduledEvent
from .stage_instance import StageInstance as StageInstance
from .sticker import GuildSticker as GuildSticker
from .threads import Thread as Thread, ThreadMember as ThreadMember
from .types.channel import DMChannel as DMChannelPayload
from .types.emoji import Emoji as EmojiPayload
from .types.message import Message as MessagePayload
from .types.poll import Poll as PollPayload
from .types.sticker import GuildSticker as GuildStickerPayload
from .types.user import User as UserPayload
from .ui.modal import Modal as Modal, ModalStore as ModalStore
from .ui.view import View as View, ViewStore as ViewStore
from .user import ClientUser as ClientUser, User as User
from .voice_client import VoiceClient as VoiceClient
from _typeshed import Incomplete
from typing import Any, Callable, Coroutine, Sequence, TypeVar

T = TypeVar('T')
CS = TypeVar('CS', bound='ConnectionState')
Channel = GuildChannel | VocalGuildChannel | PrivateChannel | PartialMessageable

class ChunkRequest:
    guild_id: int
    resolver: Callable[[int], Any]
    loop: asyncio.AbstractEventLoop
    cache: bool
    nonce: str
    buffer: list[Member]
    waiters: list[asyncio.Future[list[Member]]]
    def __init__(self, guild_id: int, loop: asyncio.AbstractEventLoop, resolver: Callable[[int], Any], *, cache: bool = True) -> None: ...
    def add_members(self, members: list[Member]) -> None: ...
    async def wait(self) -> list[Member]: ...
    def get_future(self) -> asyncio.Future[list[Member]]: ...
    def done(self) -> None: ...

async def logging_coroutine(coroutine: Coroutine[Any, Any, T], *, info: str) -> None: ...

class ConnectionState:
    loop: asyncio.AbstractEventLoop
    http: HTTPClient
    max_messages: int | None
    dispatch: Callable
    handlers: dict[str, Callable]
    hooks: dict[str, Callable]
    shard_count: int | None
    application_id: int | None
    heartbeat_timeout: float
    guild_ready_timeout: float
    allowed_mentions: AllowedMentions | None
    member_cache_flags: MemberCacheFlags
    parsers: Incomplete
    def __init__(self, *, dispatch: Callable, handlers: dict[str, Callable], hooks: dict[str, Callable], http: HTTPClient, loop: asyncio.AbstractEventLoop, **options: Any) -> None: ...
    user: ClientUser | None
    def clear(self, *, views: bool = True) -> None: ...
    def process_chunk_requests(self, guild_id: int, nonce: str | None, members: list[Member], complete: bool) -> None: ...
    def call_handlers(self, key: str, *args: Any, **kwargs: Any) -> None: ...
    async def call_hooks(self, key: str, *args: Any, **kwargs: Any) -> None: ...
    @property
    def self_id(self) -> int | None: ...
    @property
    def intents(self) -> Intents: ...
    @property
    def voice_clients(self) -> list[VoiceClient]: ...
    def store_user(self, data: UserPayload) -> User: ...
    def deref_user(self, user_id: int) -> None: ...
    def create_user(self, data: UserPayload) -> User: ...
    def deref_user_no_intents(self, user_id: int) -> None: ...
    def get_user(self, id: int | None) -> User | None: ...
    def store_emoji(self, guild: Guild, data: EmojiPayload) -> Emoji: ...
    def store_sticker(self, guild: Guild, data: GuildStickerPayload) -> GuildSticker: ...
    def store_view(self, view: View, message_id: int | None = None) -> None: ...
    def store_modal(self, modal: Modal, message_id: int) -> None: ...
    def prevent_view_updates_for(self, message_id: int) -> View | None: ...
    @property
    def persistent_views(self) -> Sequence[View]: ...
    @property
    def guilds(self) -> list[Guild]: ...
    @property
    def emojis(self) -> list[Emoji]: ...
    @property
    def stickers(self) -> list[GuildSticker]: ...
    def get_emoji(self, emoji_id: int | None) -> Emoji | None: ...
    def get_sticker(self, sticker_id: int | None) -> GuildSticker | None: ...
    @property
    def polls(self) -> list[Poll]: ...
    def store_raw_poll(self, poll: PollPayload, raw): ...
    def store_poll(self, poll: Poll, message_id: int): ...
    def get_poll(self, message_id): ...
    @property
    def private_channels(self) -> list[PrivateChannel]: ...
    def add_dm_channel(self, data: DMChannelPayload) -> DMChannel: ...
    async def chunker(self, guild_id: int, query: str = '', limit: int = 0, presences: bool = False, *, nonce: str | None = None) -> None: ...
    async def query_members(self, guild: Guild, query: str | None, limit: int, user_ids: list[int] | None, cache: bool, presences: bool): ...
    application_flags: Incomplete
    def parse_ready(self, data) -> None: ...
    def parse_resumed(self, data) -> None: ...
    def parse_application_command_permissions_update(self, data) -> None: ...
    def parse_auto_moderation_rule_create(self, data) -> None: ...
    def parse_auto_moderation_rule_update(self, data) -> None: ...
    def parse_auto_moderation_rule_delete(self, data) -> None: ...
    def parse_auto_moderation_action_execution(self, data) -> None: ...
    def parse_entitlement_create(self, data) -> None: ...
    def parse_entitlement_update(self, data) -> None: ...
    def parse_entitlement_delete(self, data) -> None: ...
    def parse_message_create(self, data) -> None: ...
    def parse_message_delete(self, data) -> None: ...
    def parse_message_delete_bulk(self, data) -> None: ...
    def parse_message_update(self, data) -> None: ...
    def parse_message_reaction_add(self, data) -> None: ...
    def parse_message_reaction_remove_all(self, data) -> None: ...
    def parse_message_reaction_remove(self, data) -> None: ...
    def parse_message_reaction_remove_emoji(self, data) -> None: ...
    def parse_message_poll_vote_add(self, data) -> None: ...
    def parse_message_poll_vote_remove(self, data) -> None: ...
    def parse_interaction_create(self, data) -> None: ...
    def parse_presence_update(self, data) -> None: ...
    def parse_user_update(self, data) -> None: ...
    def parse_invite_create(self, data) -> None: ...
    def parse_invite_delete(self, data) -> None: ...
    def parse_channel_delete(self, data) -> None: ...
    def parse_channel_update(self, data) -> None: ...
    def parse_channel_create(self, data) -> None: ...
    def parse_channel_pins_update(self, data) -> None: ...
    def parse_thread_create(self, data) -> None: ...
    def parse_thread_update(self, data) -> None: ...
    def parse_thread_delete(self, data) -> None: ...
    def parse_thread_list_sync(self, data) -> None: ...
    def parse_thread_member_update(self, data) -> None: ...
    def parse_thread_members_update(self, data) -> None: ...
    def parse_guild_member_add(self, data) -> None: ...
    def parse_guild_member_remove(self, data) -> None: ...
    def parse_guild_member_update(self, data) -> None: ...
    def parse_guild_emojis_update(self, data) -> None: ...
    def parse_guild_stickers_update(self, data) -> None: ...
    def is_guild_evicted(self, guild) -> bool: ...
    async def chunk_guild(self, guild, *, wait: bool = True, cache=None): ...
    def parse_guild_create(self, data) -> None: ...
    def parse_guild_update(self, data) -> None: ...
    def parse_guild_delete(self, data) -> None: ...
    def parse_guild_audit_log_entry_create(self, data) -> None: ...
    def parse_guild_ban_add(self, data) -> None: ...
    def parse_guild_ban_remove(self, data) -> None: ...
    def parse_guild_role_create(self, data) -> None: ...
    def parse_guild_role_delete(self, data) -> None: ...
    def parse_guild_role_update(self, data) -> None: ...
    def parse_guild_members_chunk(self, data) -> None: ...
    def parse_guild_scheduled_event_create(self, data) -> None: ...
    def parse_guild_scheduled_event_update(self, data) -> None: ...
    def parse_guild_scheduled_event_delete(self, data) -> None: ...
    def parse_guild_scheduled_event_user_add(self, data) -> None: ...
    def parse_guild_scheduled_event_user_remove(self, data) -> None: ...
    def parse_guild_integrations_update(self, data) -> None: ...
    def parse_integration_create(self, data) -> None: ...
    def parse_integration_update(self, data) -> None: ...
    def parse_integration_delete(self, data) -> None: ...
    def parse_webhooks_update(self, data) -> None: ...
    def parse_stage_instance_create(self, data) -> None: ...
    def parse_stage_instance_update(self, data) -> None: ...
    def parse_stage_instance_delete(self, data) -> None: ...
    def parse_voice_state_update(self, data) -> None: ...
    def parse_voice_server_update(self, data) -> None: ...
    def parse_voice_channel_status_update(self, data) -> None: ...
    def parse_typing_start(self, data) -> None: ...
    def get_reaction_emoji(self, data) -> Emoji | PartialEmoji: ...
    def get_channel(self, id: int | None) -> Channel | Thread | None: ...
    def create_message(self, *, channel: MessageableChannel, data: MessagePayload) -> Message: ...

class AutoShardedConnectionState(ConnectionState):
    shard_ids: list[int] | range
    shards_launched: asyncio.Event
    def __init__(self, *args: Any, **kwargs: Any) -> None: ...
    async def chunker(self, guild_id: int, query: str = '', limit: int = 0, presences: bool = False, *, shard_id: int | None = None, nonce: str | None = None) -> None: ...
    user: Incomplete
    application_id: Incomplete
    application_flags: Incomplete
    def parse_ready(self, data) -> None: ...
    def parse_resumed(self, data) -> None: ...
