import datetime
import discord.abc
from .abc import Snowflake
from .activity import ActivityTypes
from .asset import Asset
from .channel import DMChannel, StageChannel, VoiceChannel
from .colour import Colour
from .enums import Status
from .flags import MemberFlags, PublicUserFlags
from .guild import Guild
from .message import Message
from .permissions import Permissions
from .role import Role
from .state import ConnectionState
from .types.member import MemberWithUser as MemberWithUserPayload
from .types.voice import GuildVoiceState as GuildVoiceStatePayload, VoiceState as VoiceStatePayload
from .user import _UserTag
from _typeshed import Incomplete
from typing import Any, TypeVar

__all__ = ['VoiceState', 'Member']

VocalGuildChannel = VoiceChannel | StageChannel

class VoiceState:
    session_id: str
    def __init__(self, *, data: VoiceStatePayload | GuildVoiceStatePayload, channel: VocalGuildChannel | None = None) -> None: ...
M = TypeVar('M', bound='Member')

class Member(discord.abc.Messageable, _UserTag):
    name: str
    id: int
    discriminator: str
    bot: bool
    system: bool
    created_at: datetime.datetime
    default_avatar: Asset
    avatar: Asset | None
    dm_channel: DMChannel | None
    create_dm: Incomplete
    mutual_guilds: list[Guild]
    public_flags: PublicUserFlags
    banner: Asset | None
    accent_color: Colour | None
    accent_colour: Colour | None
    communication_disabled_until: datetime.datetime | None
    guild: Guild
    joined_at: datetime.datetime | None
    premium_since: datetime.datetime | None
    activities: tuple[ActivityTypes, ...]
    nick: str | None
    pending: bool
    flags: MemberFlags
    def __init__(self, *, data: MemberWithUserPayload, guild: Guild, state: ConnectionState) -> None: ...
    def __eq__(self, other: Any) -> bool: ...
    def __hash__(self) -> int: ...
    @property
    def status(self) -> Status: ...
    @property
    def raw_status(self) -> str: ...
    @status.setter
    def status(self, value: Status) -> None: ...
    @property
    def mobile_status(self) -> Status: ...
    @property
    def desktop_status(self) -> Status: ...
    @property
    def web_status(self) -> Status: ...
    @property
    def global_name(self) -> str | None: ...
    def is_on_mobile(self) -> bool: ...
    @property
    def colour(self) -> Colour: ...
    @property
    def color(self) -> Colour: ...
    @property
    def roles(self) -> list[Role]: ...
    @property
    def mention(self) -> str: ...
    @property
    def display_name(self) -> str: ...
    @property
    def display_avatar(self) -> Asset: ...
    @property
    def guild_avatar(self) -> Asset | None: ...
    @property
    def activity(self) -> ActivityTypes | None: ...
    def mentioned_in(self, message: Message) -> bool: ...
    @property
    def top_role(self) -> Role: ...
    @property
    def guild_permissions(self) -> Permissions: ...
    @property
    def voice(self) -> VoiceState | None: ...
    @property
    def timed_out(self) -> bool: ...
    async def ban(self, *, delete_message_seconds: int | None = None, reason: str | None = None) -> None: ...
    async def unban(self, *, reason: str | None = None) -> None: ...
    async def kick(self, *, reason: str | None = None) -> None: ...
    async def edit(self, *, nick: str | None = ..., mute: bool = ..., deafen: bool = ..., suppress: bool = ..., roles: list[discord.abc.Snowflake] = ..., voice_channel: VocalGuildChannel | None = ..., reason: str | None = None, communication_disabled_until: datetime.datetime | None = ..., bypass_verification: bool | None = ...) -> Member | None: ...
    async def timeout(self, until: datetime.datetime | None, *, reason: str | None = None) -> None: ...
    async def timeout_for(self, duration: datetime.timedelta, *, reason: str | None = None) -> None: ...
    async def remove_timeout(self, *, reason: str | None = None) -> None: ...
    async def request_to_speak(self) -> None: ...
    async def move_to(self, channel: VocalGuildChannel | None, *, reason: str | None = None) -> None: ...
    async def add_roles(self, *roles: Snowflake, reason: str | None = None, atomic: bool = True) -> None: ...
    async def remove_roles(self, *roles: Snowflake, reason: str | None = None, atomic: bool = True) -> None: ...
    def get_role(self, role_id: int, /) -> Role | None: ...
