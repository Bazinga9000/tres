import datetime
from .asset import Asset
from .colour import Colour
from .guild import Guild
from .member import Member
from .mixins import Hashable
from .permissions import Permissions
from .state import ConnectionState
from .types.role import Role as RolePayload, RoleTags as RoleTagPayload
from typing import TypeVar

__all__ = ['RoleTags', 'Role']

class RoleTags:
    bot_id: int | None
    integration_id: int | None
    def __init__(self, data: RoleTagPayload) -> None: ...
    def is_bot_managed(self) -> bool: ...
    def is_premium_subscriber(self) -> bool: ...
    def is_integration(self) -> bool: ...
R = TypeVar('R', bound='Role')

class Role(Hashable):
    guild: Guild
    id: int
    def __init__(self, *, guild: Guild, state: ConnectionState, data: RolePayload) -> None: ...
    def __lt__(self, other: R) -> bool: ...
    def __le__(self, other: R) -> bool: ...
    def __gt__(self, other: R) -> bool: ...
    def __ge__(self, other: R) -> bool: ...
    def is_default(self) -> bool: ...
    def is_bot_managed(self) -> bool: ...
    def is_premium_subscriber(self) -> bool: ...
    def is_integration(self) -> bool: ...
    def is_assignable(self) -> bool: ...
    @property
    def permissions(self) -> Permissions: ...
    @property
    def colour(self) -> Colour: ...
    @property
    def color(self) -> Colour: ...
    @property
    def created_at(self) -> datetime.datetime: ...
    @property
    def mention(self) -> str: ...
    @property
    def members(self) -> list[Member]: ...
    @property
    def icon(self) -> Asset | None: ...
    async def edit(self, *, name: str = ..., permissions: Permissions = ..., colour: Colour | int = ..., color: Colour | int = ..., hoist: bool = ..., mentionable: bool = ..., position: int = ..., reason: str | None = ..., icon: bytes | None = ..., unicode_emoji: str | None = ...) -> Role | None: ...
    async def delete(self, *, reason: str | None = None) -> None: ...
