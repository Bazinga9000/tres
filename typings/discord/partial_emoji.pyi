from .asset import AssetMixin
from .state import ConnectionState
from .types.message import PartialEmoji as PartialEmojiPayload
from _typeshed import Incomplete
from datetime import datetime
from typing import Any, TypeVar

__all__ = ['PartialEmoji']

class _EmojiTag:
    id: int
PE = TypeVar('PE', bound='PartialEmoji')

class PartialEmoji(_EmojiTag, AssetMixin):
    id: int | None
    animated: Incomplete
    name: Incomplete
    def __init__(self, *, name: str | None, animated: bool = False, id: int | None = None) -> None: ...
    @classmethod
    def from_dict(cls, data: PartialEmojiPayload | dict[str, Any]) -> PE: ...
    @classmethod
    def from_str(cls, value: str) -> PE: ...
    def to_dict(self) -> dict[str, Any]: ...
    @classmethod
    def with_state(cls, state: ConnectionState, *, name: str, animated: bool = False, id: int | None = None) -> PE: ...
    def __eq__(self, other: Any) -> bool: ...
    def __hash__(self) -> int: ...
    def is_custom_emoji(self) -> bool: ...
    def is_unicode_emoji(self) -> bool: ...
    @property
    def created_at(self) -> datetime | None: ...
    @property
    def url(self) -> str: ...
    async def read(self) -> bytes: ...
