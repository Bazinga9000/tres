import ctypes
import threading
from .errors import DiscordException
from _typeshed import Incomplete
from typing import TypeVar, TypedDict

__all__ = ['Encoder', 'Decoder', 'DecodeManager', 'OpusError', 'OpusNotLoaded']

T = TypeVar('T')

class BandCtl(TypedDict):
    narrow: int
    medium: int
    wide: int
    superwide: int
    full: int

class SignalCtl(TypedDict):
    auto: int
    voice: int
    music: int

class EncoderStruct(ctypes.Structure): ...
class DecoderStruct(ctypes.Structure): ...

class OpusError(DiscordException):
    code: int
    def __init__(self, code: int) -> None: ...

class OpusNotLoaded(DiscordException): ...

class _OpusStruct:
    SAMPLING_RATE: int
    CHANNELS: int
    FRAME_LENGTH: int
    SAMPLE_SIZE: Incomplete
    SAMPLES_PER_FRAME: Incomplete
    FRAME_SIZE: Incomplete
    @staticmethod
    def get_opus_version() -> str: ...

class Encoder(_OpusStruct):
    application: int
    def __init__(self, application: int = ...) -> None: ...
    def __del__(self) -> None: ...
    def set_bitrate(self, kbps: int) -> int: ...
    def set_bandwidth(self, req: BAND_CTL) -> None: ...
    def set_signal_type(self, req: SIGNAL_CTL) -> None: ...
    def set_fec(self, enabled: bool = True) -> None: ...
    def set_expected_packet_loss_percent(self, percentage: float) -> None: ...
    def encode(self, pcm: bytes, frame_size: int) -> bytes: ...

class Decoder(_OpusStruct):
    def __init__(self) -> None: ...
    def __del__(self) -> None: ...
    @staticmethod
    def packet_get_nb_frames(data): ...
    @staticmethod
    def packet_get_nb_channels(data): ...
    @classmethod
    def packet_get_samples_per_frame(cls, data): ...
    def set_gain(self, dB): ...
    def set_volume(self, mult): ...
    def decode(self, data, *, fec: bool = False): ...

class DecodeManager(threading.Thread, _OpusStruct):
    client: Incomplete
    decode_queue: Incomplete
    decoder: Incomplete
    def __init__(self, client) -> None: ...
    def decode(self, opus_frame) -> None: ...
    def run(self) -> None: ...
    def stop(self) -> None: ...
    def get_decoder(self, ssrc): ...
    @property
    def decoding(self): ...
