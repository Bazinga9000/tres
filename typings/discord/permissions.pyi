from .flags import BaseFlags, alias_flag_value, flag_value
from _typeshed import Incomplete
from typing import Any, Callable, ClassVar, Iterator, TypeVar

__all__ = ['Permissions', 'PermissionOverwrite']

class permission_alias(alias_flag_value):
    alias: str
P = TypeVar('P', bound='Permissions')

class Permissions(BaseFlags):
    value: Incomplete
    def __init__(self, permissions: int = 0, **kwargs: bool) -> None: ...
    def is_subset(self, other: Permissions) -> bool: ...
    def is_superset(self, other: Permissions) -> bool: ...
    def is_strict_subset(self, other: Permissions) -> bool: ...
    def is_strict_superset(self, other: Permissions) -> bool: ...
    __le__: Callable[[Permissions], bool]
    __ge__: Callable[[Permissions], bool]
    __lt__: Callable[[Permissions], bool]
    __gt__: Callable[[Permissions], bool]
    @classmethod
    def none(cls) -> P: ...
    @classmethod
    def all(cls) -> P: ...
    @classmethod
    def all_channel(cls) -> P: ...
    @classmethod
    def general(cls) -> P: ...
    @classmethod
    def membership(cls) -> P: ...
    @classmethod
    def text(cls) -> P: ...
    @classmethod
    def voice(cls) -> P: ...
    @classmethod
    def stage(cls) -> P: ...
    @classmethod
    def stage_moderator(cls) -> P: ...
    @classmethod
    def advanced(cls) -> P: ...
    def update(self, **kwargs: bool) -> None: ...
    def handle_overwrite(self, allow: int, deny: int) -> None: ...
    @flag_value
    def create_instant_invite(self) -> int: ...
    @flag_value
    def kick_members(self) -> int: ...
    @flag_value
    def ban_members(self) -> int: ...
    @flag_value
    def administrator(self) -> int: ...
    @flag_value
    def manage_channels(self) -> int: ...
    @flag_value
    def manage_guild(self) -> int: ...
    @flag_value
    def add_reactions(self) -> int: ...
    @flag_value
    def view_audit_log(self) -> int: ...
    @flag_value
    def priority_speaker(self) -> int: ...
    @flag_value
    def stream(self) -> int: ...
    @flag_value
    def view_channel(self) -> int: ...
    def read_messages(self) -> int: ...
    @flag_value
    def send_messages(self) -> int: ...
    @flag_value
    def send_tts_messages(self) -> int: ...
    @flag_value
    def manage_messages(self) -> int: ...
    @flag_value
    def embed_links(self) -> int: ...
    @flag_value
    def attach_files(self) -> int: ...
    @flag_value
    def read_message_history(self) -> int: ...
    @flag_value
    def mention_everyone(self) -> int: ...
    @flag_value
    def external_emojis(self) -> int: ...
    def use_external_emojis(self) -> int: ...
    @flag_value
    def view_guild_insights(self) -> int: ...
    @flag_value
    def connect(self) -> int: ...
    @flag_value
    def speak(self) -> int: ...
    @flag_value
    def mute_members(self) -> int: ...
    @flag_value
    def deafen_members(self) -> int: ...
    @flag_value
    def move_members(self) -> int: ...
    @flag_value
    def use_voice_activation(self) -> int: ...
    @flag_value
    def change_nickname(self) -> int: ...
    @flag_value
    def manage_nicknames(self) -> int: ...
    @flag_value
    def manage_roles(self) -> int: ...
    def manage_permissions(self) -> int: ...
    @flag_value
    def manage_webhooks(self) -> int: ...
    @flag_value
    def manage_emojis(self) -> int: ...
    def manage_emojis_and_stickers(self) -> int: ...
    @flag_value
    def use_slash_commands(self) -> int: ...
    def use_application_commands(self) -> int: ...
    @flag_value
    def request_to_speak(self) -> int: ...
    @flag_value
    def manage_events(self) -> int: ...
    @flag_value
    def manage_threads(self) -> int: ...
    @flag_value
    def create_public_threads(self) -> int: ...
    @flag_value
    def create_private_threads(self) -> int: ...
    @flag_value
    def external_stickers(self) -> int: ...
    def use_external_stickers(self) -> int: ...
    @flag_value
    def send_messages_in_threads(self) -> int: ...
    @flag_value
    def start_embedded_activities(self) -> int: ...
    @flag_value
    def moderate_members(self) -> int: ...
    @flag_value
    def send_voice_messages(self) -> int: ...
    @flag_value
    def set_voice_channel_status(self) -> int: ...
    @flag_value
    def send_polls(self) -> int: ...
    @flag_value
    def use_external_apps(self) -> int: ...
PO = TypeVar('PO', bound='PermissionOverwrite')

class PermissionOverwrite:
    VALID_NAMES: ClassVar[set[str]]
    PURE_FLAGS: ClassVar[set[str]]
    create_instant_invite: bool | None
    kick_members: bool | None
    ban_members: bool | None
    administrator: bool | None
    manage_channels: bool | None
    manage_guild: bool | None
    add_reactions: bool | None
    view_audit_log: bool | None
    priority_speaker: bool | None
    stream: bool | None
    read_messages: bool | None
    view_channel: bool | None
    send_messages: bool | None
    send_tts_messages: bool | None
    manage_messages: bool | None
    embed_links: bool | None
    attach_files: bool | None
    read_message_history: bool | None
    mention_everyone: bool | None
    external_emojis: bool | None
    use_external_emojis: bool | None
    view_guild_insights: bool | None
    connect: bool | None
    speak: bool | None
    mute_members: bool | None
    deafen_members: bool | None
    move_members: bool | None
    use_voice_activation: bool | None
    change_nickname: bool | None
    manage_nicknames: bool | None
    manage_roles: bool | None
    manage_permissions: bool | None
    manage_webhooks: bool | None
    manage_emojis: bool | None
    manage_emojis_and_stickers: bool | None
    use_slash_commands: bool | None
    request_to_speak: bool | None
    manage_events: bool | None
    manage_threads: bool | None
    create_public_threads: bool | None
    create_private_threads: bool | None
    send_messages_in_threads: bool | None
    external_stickers: bool | None
    use_external_stickers: bool | None
    start_embedded_activities: bool | None
    moderate_members: bool | None
    send_voice_messages: bool | None
    set_voice_channel_status: bool | None
    send_polls: bool | None
    use_external_apps: bool | None
    def __init__(self, **kwargs: bool | None) -> None: ...
    def __eq__(self, other: Any) -> bool: ...
    def pair(self) -> tuple[Permissions, Permissions]: ...
    @classmethod
    def from_pair(cls, allow: Permissions, deny: Permissions) -> PO: ...
    def is_empty(self) -> bool: ...
    def update(self, **kwargs: bool) -> None: ...
    def __iter__(self) -> Iterator[tuple[str, bool | None]]: ...
